// Code generated by go-bindata.
// sources:
// templates/cf_lb.tf
// templates/network.tf
// templates/network_security_group.tf
// templates/output.tf
// templates/resource_group.tf
// templates/storage.tf
// templates/template
// templates/tls.tf
// templates/vars.tf
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCf_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\x16\xcc\x77\x95\x62\xfb\x4b\x8a\x5e\x7c\x69\x7b\xe8\x3d\x28\x7a\x28\x0a\x82\x92\xd6\x36\x61\x9a\x64\x48\xca\xa9\x1b\xf8\xdd\x0b\x52\x7f\x96\x44\x39\x6e\x4e\xf5\x51\x9e\xdd\x9d\x99\xfd\x91\xee\xe0\xb3\x41\xe6\x10\x18\x30\xad\x05\x2f\x98\xe3\x4a\xc2\x96\x39\x7c\x61\x27\xe0\x12\xdc\x0e\xe1\x05\x73\x6a\xd1\x1c\xd1\x58\x30\x68\x55\x65\x0a\x84\xad\x51\x95\x4e\xee\xfa\x07\x84\xfd\xae\x0c\x9a\x03\x3d\x72\xe3\x2a\x26\xa8\x44\xf7\xa2\xcc\x9e\x00\x39\x4a\x74\x04\x5e\x93\x3b\x00\x90\xec\x80\x30\xfa\xad\x81\x1c\x4e\xa9\x47\xa5\xcb\xd5\xff\x0f\x8f\x24\x20\xdb\xcc\x34\x94\xa2\x21\x70\x0d\xe4\xbf\xd7\xb6\xd0\x10\x90\xe5\xca\xee\x32\x8f\x3a\xd7\xf1\xac\x2c\x0d\x5a\x4b\xad\x66\x05\x76\x95\x7e\x90\xe5\x22\x5b\x3d\x3e\x64\x8b\x6c\x71\xbf\xfc\x40\x7e\x06\xac\x50\x8d\xf4\x21\xab\xd9\x5a\x66\x9b\xb5\x21\xa1\xda\x39\x49\xa6\x46\xd8\x2a\x0f\xc2\x89\xad\xf2\xa5\xd7\x1f\x57\xef\x0b\xd5\xd0\x74\x49\x92\xb8\xee\x9b\x85\x03\x8c\xec\x8f\xf8\x36\x42\x8c\xe2\x5b\xdb\xb4\xc1\x0d\xff\xd5\x53\xbc\xb0\x6d\xf5\x40\x92\x37\x15\xaf\x6e\x52\xbc\xfa\xf7\x15\xaf\xae\x29\xd6\x55\x2e\x78\x41\xb9\x26\x40\x44\x7e\x45\xf2\x60\xaa\x8e\xcc\x64\x28\x8f\x94\x97\xe7\x54\xe4\x9e\x43\x6c\x00\xdf\x31\x89\x33\x5e\xde\x92\x68\xe8\x49\xa7\x8b\xb6\xee\x30\xd1\x71\x5c\x03\x29\x4f\x92\x1d\x78\x11\x5c\xe9\xaf\x88\x8c\x9d\x91\x88\x6b\x17\x28\xda\xa0\x08\x90\xee\x60\xcc\x99\xb8\x06\x32\xb0\x8e\x69\x9d\xb6\xe1\x33\xd2\x6f\x57\x3c\x73\x02\xbe\xa3\x75\xf0\xed\x89\x24\x90\x00\xd8\x7d\x15\xc8\x4d\xe8\xad\x81\x3c\x39\x26\x4b\x66\x4a\xfa\x74\x60\x42\x90\x80\x72\x1c\x4d\x1c\x55\xff\x5f\x30\xcd\x0a\xee\x4e\xdd\xff\xab\x04\xe0\x1c\x4a\x35\xba\x7c\x07\x0a\x25\x37\x7c\x5b\x99\x9a\x5e\x5d\x7f\xc4\x60\xec\x4c\x13\x9d\x72\x9d\x0e\xa2\x49\x13\x5c\x6f\x1f\xe5\xe5\x64\x2a\xc6\xab\xe2\xaf\x72\xc6\xcb\xf3\x7d\x1d\x62\xef\x7b\x68\xfd\x24\xf3\xd7\xad\xb7\xb1\x66\xbf\x31\x4a\x3a\x94\x25\xd5\xca\xb8\xdb\x28\xb7\x21\xa9\x0f\x69\x79\x86\xf0\x3e\xe2\xe3\x62\x5a\xe1\x7d\x06\x75\xd5\x26\x0e\x01\xb4\xb5\x27\x2b\xc0\xcb\xa1\x57\x1d\x22\x13\xb9\xf7\xa8\xd6\x9f\x00\xe4\xac\xd8\x7b\x6e\xdd\x65\x51\x4a\x0c\x79\xd5\xaf\xbc\x06\x97\x36\xb8\xd4\xe3\x7a\x13\xdb\x2c\x3b\xe7\x34\xb5\xe8\x1c\x97\x5b\x1b\x97\x17\xdf\xf0\x68\x2f\x43\xa7\xd2\x1c\xd3\x9d\xb3\x9d\xcf\x85\x52\x7b\x8e\x34\x67\x16\x4b\xca\x36\x1b\x2e\xfd\x54\xae\x81\x7c\xe1\x96\xe5\x02\xcb\x68\x43\xc6\x9d\x09\x00\xa3\x9c\x2a\x94\x98\xd0\xfa\xea\x9c\x6e\xb2\x18\x7c\xae\xd0\x3a\xea\xf8\x01\x55\xe5\x7a\xd0\xb2\xd3\x1e\x34\x0b\x6e\x1d\x4a\x34\x9d\xe6\x37\x6e\xeb\x5f\xbb\xe0\xab\x08\xeb\xba\xb5\xb8\x32\x56\x83\x4b\x5a\x77\x6f\x7e\x86\xa6\xe9\xbc\x6f\x74\x8e\xfc\x28\xdd\xe5\x02\xcc\x19\x1a\x49\xd1\x1a\x5c\x1b\xd8\x7a\x6c\x54\xe5\xe7\x86\x9a\x4a\xe0\x85\x8f\x57\x9d\xbc\xd5\x3e\xf3\x7c\x49\x14\xc0\xd7\xa0\xee\xa4\xe3\x73\xf9\x89\x59\xff\xc2\xe8\x9f\x0d\x7a\x4c\xc7\xeb\xfa\xce\x06\xc6\x97\xaf\xff\xa6\xb8\xb2\x75\xe3\x04\x83\xbd\xbb\xe1\xab\x22\xbe\x5e\xe7\xe4\xfc\x27\x00\x00\xff\xff\x20\xe7\xe1\xd3\x67\x0b\x00\x00")

func templatesCf_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_lbTf,
		"templates/cf_lb.tf",
	)
}

func templatesCf_lbTf() (*asset, error) {
	bytes, err := templatesCf_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_lb.tf", size: 2919, mode: os.FileMode(480), modTime: time.Unix(1512068062, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetworkTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x5d\x6a\xc5\x20\x10\x85\xdf\x5d\xc5\x30\xf4\x35\xd9\x41\x57\x52\x8a\x18\x9d\xb6\xd2\x44\xc3\xf8\xd3\xd2\xe0\xde\x8b\x21\xb9\x10\x6f\xc2\xbd\xbe\xfa\xcd\x78\xbe\x23\x53\xf0\x89\x35\x01\xaa\xbf\xc4\xc4\x93\xcc\x96\x63\x52\xa3\x74\x14\x7f\x3c\x7f\x23\xe0\xe0\xc3\x17\xc2\x22\x00\x9c\x9a\x08\x9a\xf3\x0a\xf8\xb2\x64\xc5\x3d\xb9\x2c\xad\x29\x5d\xc5\xbb\xec\x50\x00\x28\x63\x98\x42\x90\x61\x56\x9a\x6e\xfc\xdb\x36\xb0\xbd\x20\xb5\x35\x5c\xf0\x5d\x00\x8c\x5e\xab\x68\xbd\x3b\xdd\xbf\x5f\x96\xba\x79\xcf\x2d\x3f\xd9\xa7\x59\xae\xc1\x56\x72\xd7\x38\x02\x7d\x0d\xd5\x57\xaa\xa0\x28\x42\xdc\x6b\x87\x34\x38\x8a\x0f\x6d\x2f\x74\xc3\x41\x77\x66\xfa\xb0\xbf\xed\xc0\x51\xf7\xc2\xe1\x69\x09\x80\xe6\xa3\x4e\x3a\x68\x88\xa6\x84\xff\x00\x00\x00\xff\xff\xfe\x40\x76\xae\xfb\x01\x00\x00")

func templatesNetworkTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetworkTf,
		"templates/network.tf",
	)
}

func templatesNetworkTf() (*asset, error) {
	bytes, err := templatesNetworkTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network.tf", size: 507, mode: os.FileMode(480), modTime: time.Unix(1512068061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetwork_security_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\xcd\x6e\x9b\x40\x10\x80\xef\x3c\xc5\x68\xd5\x53\x24\x5b\x29\x81\xc8\x97\x1c\x7a\xec\xbd\x77\xb4\xde\x1d\xf0\xaa\x78\x07\xcd\x2e\x4e\xdb\x88\x77\xaf\x16\x8a\x13\x1c\x1c\x61\xd4\xaa\xc2\xb2\xaf\xfe\xe6\x6f\xe7\xd3\x08\x46\x47\x35\x2b\x04\x21\x7f\xd5\x8c\xbc\xcf\x2c\xfa\x67\xe2\xef\x99\x43\x55\xb3\xf1\x3f\xb3\x82\xa9\xae\x04\x88\x2d\xb9\x9d\x80\x97\x08\xc0\xca\x3d\xc2\xc9\xef\x09\xc4\xa7\x97\x83\xe4\x35\xda\x43\x66\x74\xb3\x6a\xf1\x08\xa0\x24\x25\xbd\x21\x3b\x0a\xf7\x7f\x36\x81\xec\x7b\xe9\x2a\x66\x6d\x95\x96\xec\x5b\x1b\x02\xeb\x50\x61\x1d\xa8\x46\x44\x11\x80\x97\x85\x6b\xdb\x03\x40\x7b\x30\x4c\x76\x8f\xd6\xbf\x6b\x2c\x54\x6a\xa2\x26\x8a\x2e\x18\x5d\xe5\x17\x0c\xae\xf2\xa5\x8f\xcd\x75\x89\x02\x84\xfb\x68\xdf\x67\xc7\x77\xdd\xda\x2b\x36\x14\x92\x8d\xc7\xc4\xf7\xf7\x11\x80\x36\x8c\xea\xf4\x91\x5e\xf3\x7e\xb5\x5b\xaa\xad\x0e\xd9\xa4\x52\xe8\xdc\xd9\x0e\xbe\x94\x25\x3d\x77\x55\xc9\x93\xa2\xf2\x0c\xf7\x4d\x55\x81\xfa\xf3\x9c\x15\xb1\xcf\x58\xda\x02\x87\xd4\x5d\x60\x34\x3a\x6f\x6c\xbb\xa5\x77\xe0\x13\x88\x38\x7e\x93\x48\x6a\xcd\xe8\x5c\x56\x31\xe6\xe6\xc7\x07\x89\x4e\xc1\x9e\x19\x53\x60\xf0\xc0\x13\x54\x00\x18\xd7\x77\x44\xa8\x71\x70\x90\xed\x22\x51\x42\xe0\x4a\x16\x68\xfd\x0c\x5f\xde\x04\x4f\xd0\xe6\xf3\xb2\xb5\x79\xdc\x3c\x6e\x6e\xe2\x0c\xc5\xe9\xd6\x49\x3c\xd7\x9d\x63\xfc\x04\x7d\xe2\x65\xeb\x13\xa7\x69\x9a\xde\xfc\x39\xfa\xa3\xad\x9b\x61\x4d\x88\x9a\xe0\xca\xc3\xff\x70\xe5\xee\x2f\x99\x92\x3e\xdc\x34\x39\x6a\xa2\x18\xf5\xae\xde\xce\x50\xa5\x8f\x9c\xa0\x4b\xb2\xec\xd3\xb2\xd9\x24\xc9\x4d\x99\x57\x65\xf2\xd5\xce\xfb\xea\x1f\x9e\x97\x85\x7f\xc9\x24\xc9\x15\x5e\x18\x95\xcf\x95\xa5\xa4\x62\xce\x79\xe9\x02\xaf\xff\xc3\x25\xb9\x7a\x5d\x7e\x07\x00\x00\xff\xff\x4c\xca\x07\xe0\x49\x11\x00\x00")

func templatesNetwork_security_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetwork_security_groupTf,
		"templates/network_security_group.tf",
	)
}

func templatesNetwork_security_groupTf() (*asset, error) {
	bytes, err := templatesNetwork_security_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network_security_group.tf", size: 4425, mode: os.FileMode(480), modTime: time.Unix(1512068061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOutputTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xdd\x6e\xa3\x30\x10\x85\xef\x79\x0a\x0b\xed\x35\x95\x22\x71\x13\x69\x9f\xc5\x32\x66\xda\xcc\xd6\xd8\xd6\xfc\xb0\xed\x56\x79\xf7\x15\x4b\x89\xe2\x26\x40\xb6\xb9\x0c\xdf\x7c\xe7\x68\xc6\x49\x25\xab\x98\xba\x4b\x7c\xb2\x11\xe4\x77\xa2\x57\x1b\xdd\x00\xb5\xf9\xa8\x8c\x19\x5d\x50\x30\x3f\x4d\xfd\xe3\xc3\xfd\x51\x02\x1a\xec\x88\x24\xea\xc2\x02\x37\xd3\x64\x33\x4d\x9c\xeb\xea\x5c\x55\x85\x90\xb5\x8b\x20\xdb\xbe\x99\xd9\xd4\x10\x70\x52\xf2\x60\x5f\x28\x69\xde\xd6\x95\xec\x76\x3b\x49\xe4\x5e\xc0\x3a\xef\x93\xc6\xbd\x9a\x25\xbc\x29\xee\xe1\xd9\x69\x10\xcb\xe0\x95\x50\xde\xe7\x2e\xab\xea\x65\xed\x25\xbe\x96\x00\x6f\x02\x14\x5d\xb0\xb8\x6e\xcc\xda\x05\xf4\x16\x3f\x25\x98\xad\xeb\x7b\x02\xe6\x52\xd5\x23\x81\x97\x44\xcb\xd7\x2f\xbe\x93\x48\xe6\xe3\xd3\xd3\x23\xde\xe3\xa1\x6d\xdb\xf6\x76\x15\xe3\xc0\x36\x13\x8e\x4e\xc0\xbe\xc2\xfb\x75\xc2\xf4\xfb\xd7\x5a\x42\xc1\x34\xcb\x60\x73\xf5\xa7\xcd\x30\x9c\xeb\xca\x18\x86\xc8\x28\x38\x4e\x0d\x85\x14\xee\x27\xce\x3d\xff\x3f\xf0\x32\x67\x53\x86\xc8\x7c\xba\xc9\x7c\x76\x81\x8b\xd0\x5f\x3a\xe4\x2e\xbd\x59\xa5\xf0\x8d\x7b\x1c\x0f\x87\x62\x69\xcb\x5b\xf0\xd8\xd3\x8d\x6e\x74\xd4\x5c\x03\xe5\x35\x31\x7e\x3e\x8c\xd5\xd9\x82\x28\x87\x59\x3b\xf6\x84\x59\x30\x45\x8b\xfd\xdd\xb5\x4d\x8a\x2f\xdc\xee\x49\x04\xa2\x8b\xb2\x65\xbc\x10\xbb\x2e\x1f\x10\xb6\x5d\x17\xe2\x51\x17\x83\x27\x90\x3d\xdf\x4c\xad\x39\xff\x06\x00\x00\xff\xff\xf8\xc9\xc8\x2d\x43\x05\x00\x00")

func templatesOutputTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesOutputTf,
		"templates/output.tf",
	)
}

func templatesOutputTf() (*asset, error) {
	bytes, err := templatesOutputTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/output.tf", size: 1347, mode: os.FileMode(480), modTime: time.Unix(1512068061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResource_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x6a\xc5\x30\x0c\x44\xf7\x3e\xc5\x60\xba\x6d\x6e\xd0\xb3\x18\xc5\x11\xa9\x21\xb1\x83\x6c\x67\xd1\xe0\xbb\x17\x1b\xd2\x26\x24\xff\x7f\xf8\x5a\x8a\xd1\x68\xe6\x09\xc7\x90\xc5\x32\x34\xfd\x64\x61\x99\xcd\xbe\x31\xa3\x84\xbc\x68\xe8\x3e\xc4\x6f\x8d\x4d\x01\x9e\x66\x46\x9d\x2f\xe8\x8f\x6d\x25\xe9\xd8\xaf\xc6\x0d\xe5\xb3\x69\x14\x30\x05\x4b\xc9\x05\xff\xaf\xd8\x37\x45\x2b\x05\x24\x1a\x63\xb3\x02\xd8\xaf\x4e\x82\x9f\xd9\xa7\x8b\x5f\xb5\x2a\xaa\x28\x75\x8d\xb7\xe4\x7e\x72\xd6\xb8\x07\xc9\xee\xe6\x75\xda\xa7\x57\x87\x06\xc0\x99\x8e\x39\xff\x6d\x27\xf7\x1c\xbb\xfa\xb3\xab\xf2\x66\xf3\xd7\xc2\xd0\x30\x08\xc7\x68\x68\x3a\xb2\x8b\x89\x92\xb3\xef\x20\xfb\x0d\x00\x00\xff\xff\xe9\x3c\x7f\x17\xd1\x01\x00\x00")

func templatesResource_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResource_groupTf,
		"templates/resource_group.tf",
	)
}

func templatesResource_groupTf() (*asset, error) {
	bytes, err := templatesResource_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resource_group.tf", size: 465, mode: os.FileMode(480), modTime: time.Unix(1512068061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStorageTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\xcd\x6e\xc3\x20\x0c\xc7\xef\x3c\x85\x85\x76\xee\x1b\xec\xbc\xfb\xfa\x00\xc8\x21\x56\x86\x44\x20\xb2\x4d\xa6\xad\xca\xbb\x4f\xb0\x36\x6b\x91\xaa\xf6\xb8\x5c\xf3\xf3\xff\x0b\x26\xc9\x85\x3d\x81\xc5\xef\xc2\xc4\xb3\x13\xcd\x8c\x13\x39\xf4\x3e\x97\xa4\x16\xec\x90\xe5\xc3\xc2\xc9\x00\x24\x9c\x09\xba\xef\x15\xec\xcb\x69\x45\x3e\x48\x98\x97\x48\x8e\xd2\xea\xc2\xb8\x59\x03\x70\x11\x77\x13\xe7\xb2\xb8\x76\xdd\xf0\x8b\xd7\x2d\x70\xa8\x46\x87\x4a\x6d\xd6\x18\x80\x98\x3d\x6a\xc8\xa9\x77\xac\x1a\x9f\x24\x5a\xa4\x9a\x9c\x73\x3a\x0d\xc4\x3d\x75\x54\x4c\x23\xf2\x78\xcd\x31\x2d\x31\xfc\x0a\x3b\xfd\x5a\x5a\xa2\xb7\xf7\x63\x73\x54\x9c\xa4\x15\x05\xa0\xb4\x06\xce\x69\xa6\xa4\x7f\x15\xaf\xba\x6d\x66\x33\xe6\xfe\x7a\x3e\x27\xc5\x90\x88\x1f\xee\xd7\x82\x36\xe4\xce\x62\xf0\xf4\x66\x00\xdd\xe3\x9d\x05\x6e\xee\x3b\xa4\x13\xd8\x73\xd7\xff\x24\xb2\x4f\xb4\x70\x58\x51\xc9\x3e\x5f\x5b\x94\x66\x4f\x31\x3e\xa8\xbe\x63\xff\xba\xfe\x10\xf3\x50\xbb\xff\x04\x00\x00\xff\xff\x40\x93\x87\xbe\x30\x03\x00\x00")

func templatesStorageTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesStorageTf,
		"templates/storage.tf",
	)
}

func templatesStorageTf() (*asset, error) {
	bytes, err := templatesStorageTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/storage.tf", size: 816, mode: os.FileMode(480), modTime: time.Unix(1512068061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4d\x6f\xe3\x36\x10\x3d\xd7\xbf\x82\x10\x7a\x5a\x20\x4e\xe2\xb5\x83\x74\x01\x1f\xf6\x54\xf4\xba\xe9\xad\x28\x08\x8a\x1a\xdb\xec\xd2\xa4\xc0\x0f\x25\x69\xe0\xff\x5e\x50\x94\x64\x89\xa2\x2c\x39\x4d\x8b\x75\x10\xe7\x26\xce\x3c\xce\x3c\x3e\x0e\x27\x64\x41\x14\x23\x29\x07\x94\x80\x28\x30\xcb\x12\xf4\x72\x98\xcd\x8e\x5f\x15\x6c\x99\x14\x09\x7a\x99\x21\x64\x9e\x73\x40\x6b\x94\x68\xa3\x98\xd8\x26\xb3\x8e\xa1\x66\xfb\x9c\x03\x8e\xa3\x68\x9b\x6a\xaa\x58\x6e\x98\x14\x91\x61\x03\x82\x08\x13\x19\xa0\x9c\xc1\xa9\x01\x0d\x54\x81\x09\x07\x05\x98\x47\xa9\xbe\x63\xca\x32\xe5\x23\xcf\x60\x43\x2c\x37\x2e\xf8\xdb\x9b\x79\xf9\x77\x7d\x7b\x17\x64\xc0\x84\x01\x25\x08\x1f\xf1\x5b\x2c\x4b\xbf\x5c\xc9\x82\x65\xa0\x50\x42\xfe\xb6\x0a\xd4\xde\x7b\x04\x99\x22\xe7\xfa\xf3\x4b\x41\xd4\x3c\x18\x39\x24\x8e\xd1\x3a\x71\x54\xfd\x1a\xeb\x66\xa4\xb4\x6b\x78\xe8\xd9\x35\x23\x6d\x3b\x4f\x4b\xcc\xce\x8f\x1c\x5c\x06\x0a\xb4\xb4\x8a\x42\x93\x00\xae\xbf\xe0\xad\x92\x36\x4f\x50\x92\x4a\xbd\xf3\x69\x09\xb2\x87\xee\xc4\x7e\xa1\x0f\x57\xa5\xcd\x0c\x21\x2e\x29\x71\xa9\x1d\x2d\xbc\x74\x0e\xc9\xcc\x25\x4a\xb6\xba\x04\x42\x08\x44\xc1\x94\x14\x7b\x10\xa6\x87\xe6\x80\x0e\x8e\xdd\x7e\x70\xb9\x4d\x39\xa3\x98\x0d\xc4\x15\xfb\x8d\xc7\x7a\xd2\xab\x89\x1f\xa1\x2e\x33\xb8\x3b\x6b\xe9\x10\xe7\x70\xee\x66\x9c\x3b\xf3\x12\xa6\xc9\x01\x93\x2c\x53\xa0\x35\x26\xbc\xcd\x9b\x36\xc4\x30\xfa\x1a\xc2\xfa\x7c\x15\x4c\x19\x4b\x38\xae\x36\xc3\x28\x6b\x51\xb2\xae\x0a\xe1\x66\xa8\xa3\xd5\x39\xa1\xd0\xd8\xff\x51\x39\xb4\xb7\xdb\x21\xf9\x73\x80\xdf\xa9\xb4\x4e\x65\x33\x2a\x12\x6d\x53\xe1\xea\xc1\x98\x42\xe2\xc9\xea\x4e\xb2\xb9\x82\x0d\x7b\x0a\x1d\xba\xc9\x0e\x49\x63\xba\x24\x82\x65\x8a\x70\x10\x58\x04\x24\x44\x38\x30\x52\x91\x2d\x60\x42\xa9\xb4\x62\x9c\x8c\x63\x81\x6a\x57\xf0\x7f\xbd\x3e\xa1\x0c\x62\xeb\x5f\x85\x88\x0d\x03\xe5\x0c\x1e\x0c\x11\x19\x51\x59\x7b\x4c\x41\xce\x99\xc7\xc1\xf5\x01\xf4\xeb\xb7\x87\x37\xaa\x2a\x35\x59\x54\x0a\x43\x98\x00\x35\xa1\xba\xac\x2b\x93\xc1\xba\x30\x7d\xf5\x83\xb5\x8a\xa9\x27\x30\x09\x00\x9a\xb8\xdd\xb8\x53\x6d\x4d\x51\xae\x58\x41\x0c\x0c\xed\x93\x48\xda\xda\xc0\x9e\x02\xe7\x23\xa9\x37\x66\x3f\x74\xfa\x29\x97\x69\x7c\x7b\xd4\x1b\x4d\x03\xb5\x8a\x99\xe7\x53\x87\xdd\x58\xc5\x18\x3a\x4b\xde\xba\xd6\xbd\x89\xd4\x07\x13\xa7\x9b\x33\xd2\xa6\x9b\xcb\x4e\x5a\x59\x0e\x4e\xec\x13\x1a\x88\x5e\xee\xda\xaf\x78\xae\x98\x74\x58\x51\x97\xc5\xcd\x8d\xeb\x1b\x99\x02\x1a\xef\x30\xd6\x28\xf9\x4d\xa4\xd2\x8a\xba\xca\x81\xd6\x43\xd3\x7f\xe5\x5c\x3e\xfa\x29\xa5\x91\x54\xf2\xb8\xd9\xef\x34\x2f\x77\x93\x67\x32\x97\xca\x60\x45\xc4\xb6\xdb\xa2\x7c\x4a\xca\x7e\x56\x1b\x26\x7c\x31\x0d\xec\xd6\x28\x59\x2c\x5a\x30\xb1\x63\x30\x06\x13\xd8\xd5\x26\xa7\x3a\xa6\xe9\x05\x22\xae\xd9\x88\x8e\xe2\x86\xe3\x0d\xc3\x90\x3e\xca\x7e\x80\x6c\xc1\x9d\x9f\xe7\xca\xa4\xe5\x3b\xae\x96\xdb\x8b\x55\xcb\xdd\xfd\xdd\xfd\x87\x5e\xda\x7a\xf1\xeb\x28\xd5\x2b\x25\xd3\xb8\x8f\xab\x66\x71\xb1\xaa\x59\xac\x56\xab\xd5\x87\x6c\x2a\xd9\x64\x42\x9f\x2f\x16\xe7\x34\x2e\x91\xcf\xff\xbb\x44\x3e\xbd\x89\x40\x56\x9f\x3f\xd4\x51\xa9\x83\x2a\xc8\x76\x36\x3d\x5f\x21\xb5\xe3\xb8\x4a\x96\x17\x5b\x48\xee\xef\x97\xcb\x0f\xa5\xd4\x4a\xd9\x5c\xed\x8c\xc9\xff\xb3\x62\x72\xb9\x5d\xca\x72\xf9\xee\xea\x09\xdd\xbc\x56\x23\x5c\x6e\x5f\x51\x4c\xbc\xdf\x7b\x6e\x4a\x96\xef\x5c\x25\xd2\x9a\xdc\x1a\xdf\xa5\x76\x6e\x1a\xbd\x1a\x0a\xc2\xed\x59\x97\x8e\x5d\x40\x7f\xe9\x7a\x1a\xcf\xdb\x9c\x84\x89\xd0\x36\x08\x77\xfa\x5e\xb8\x1b\x5d\xe4\x8e\x69\x38\xcc\x13\xb7\x4d\x21\x70\xf5\x36\xd4\xbb\x4f\x19\x80\x9e\x56\xf2\xeb\x19\xe0\xa9\x7a\x8b\x62\xc3\x88\xcd\x6b\x82\x07\x39\xbe\x2a\x74\xa1\xea\x7f\x2b\xea\x51\x87\xf7\x53\x03\x57\x1e\x1b\x5f\xae\xaf\xa7\xc0\x7e\xa9\x9a\xf7\x90\x89\x62\xef\xf6\x40\x79\xdf\x88\xbf\xc3\x73\x2f\x60\xc3\x3b\xe3\xf3\xda\x69\xde\xfa\x88\x73\xd8\xfb\x3b\x41\x10\x9a\x19\x56\x38\x5f\xa3\x2c\xc4\x67\xf3\x31\x9e\x37\x59\xe3\x83\x65\x0e\x42\xeb\x5d\x6f\xbe\x0d\xe1\xba\x33\xe1\x5f\x76\x9f\xa7\xf2\x09\x5b\xc5\xbb\xb4\x4d\xa3\x6b\xd1\xe1\xaa\xff\x2c\xd9\x82\x8b\xbc\x2d\xb4\x5c\x23\x4f\x93\x81\x6f\xc7\x22\x78\x19\x08\x28\x49\x8e\x44\x7a\x28\xc2\xb7\xae\xae\xef\xf6\x0e\xee\xdb\xc3\xd7\xb2\x88\x69\x82\x53\x66\x34\x5a\xa3\xe5\xcd\x2f\x77\xb3\xc3\xec\x9f\x00\x00\x00\xff\xff\x83\x56\x05\x44\x2a\x1e\x00\x00")

func templatesTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplate,
		"templates/template",
	)
}

func templatesTemplate() (*asset, error) {
	bytes, err := templatesTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template", size: 7722, mode: os.FileMode(480), modTime: time.Unix(1510606149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTlsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x02\x31\x0c\x05\xd0\x7d\x4e\xf1\xc9\x09\x5c\x88\xe0\xa2\x0b\xaf\xa0\x07\x08\xad\x04\x5b\x6c\xa9\x24\xb1\x30\x0c\x73\xf7\x79\xa6\x3e\xff\xf6\x56\x70\x74\x97\x9f\xb5\x95\x43\xe5\xab\x1b\x83\xcb\xf4\x2a\x6b\x38\x63\x27\x20\xf7\xcf\xb4\x16\x75\x20\x81\x9f\xaf\x07\x13\x60\x9e\xa5\xb4\x70\x20\xe1\x7a\xb9\xdf\xe8\xa0\x33\x00\x00\xff\xff\x52\x4d\xac\xad\x51\x00\x00\x00")

func templatesTlsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesTlsTf,
		"templates/tls.tf",
	)
}

func templatesTlsTf() (*asset, error) {
	bytes, err := templatesTlsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tls.tf", size: 81, mode: os.FileMode(480), modTime: time.Unix(1512068061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xd1\x6a\xc5\x20\x0c\x40\xdf\xfd\x8a\x20\x7b\xee\xd6\x31\xf6\xb6\x6f\x29\xa9\x66\x10\x66\xb5\x44\xeb\x60\xa5\xff\x3e\x5a\xc1\xed\x8a\xdc\xdb\xbe\xe5\x9c\x03\x26\x19\x85\x71\x76\x04\x9a\x7c\x9e\xd8\x6a\xd8\x0f\xa5\xfe\xa6\x2e\x18\x4c\x1c\x7c\x3b\x8f\xbc\xac\x8e\xa6\x7e\x14\xb7\x39\x1a\xe1\xf5\x0c\x3b\x38\x91\x47\x9f\x3a\xc0\x38\xa6\x7b\x20\x92\x11\x4a\x2d\xf4\x94\xbe\x83\x7c\x4d\x86\xad\x68\xd8\x15\x80\xa5\x4f\xdc\x5c\x82\x0f\xd0\xe3\xcb\x70\xfd\xcf\xe3\xbb\x56\x37\x19\xfb\x44\xe2\xd1\x3d\xe8\x5e\xdf\xae\x6e\x95\x90\xd9\x92\x80\xc6\x9f\x4d\x48\x96\x52\x34\x9b\x9e\xe5\xd3\x9e\x51\x86\x06\x1c\x5a\x01\xd4\xbd\xa1\x7c\x55\xae\xe0\xd2\xea\x15\x5a\xad\x82\xff\x5a\xb9\x49\x47\x2b\xe0\x38\x5f\xff\x1b\x00\x00\xff\xff\xbf\x05\x53\xff\xe5\x01\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 485, mode: os.FileMode(480), modTime: time.Unix(1512068061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cf_lb.tf": templatesCf_lbTf,
	"templates/network.tf": templatesNetworkTf,
	"templates/network_security_group.tf": templatesNetwork_security_groupTf,
	"templates/output.tf": templatesOutputTf,
	"templates/resource_group.tf": templatesResource_groupTf,
	"templates/storage.tf": templatesStorageTf,
	"templates/template": templatesTemplate,
	"templates/tls.tf": templatesTlsTf,
	"templates/vars.tf": templatesVarsTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cf_lb.tf": &bintree{templatesCf_lbTf, map[string]*bintree{}},
		"network.tf": &bintree{templatesNetworkTf, map[string]*bintree{}},
		"network_security_group.tf": &bintree{templatesNetwork_security_groupTf, map[string]*bintree{}},
		"output.tf": &bintree{templatesOutputTf, map[string]*bintree{}},
		"resource_group.tf": &bintree{templatesResource_groupTf, map[string]*bintree{}},
		"storage.tf": &bintree{templatesStorageTf, map[string]*bintree{}},
		"template": &bintree{templatesTemplate, map[string]*bintree{}},
		"tls.tf": &bintree{templatesTlsTf, map[string]*bintree{}},
		"vars.tf": &bintree{templatesVarsTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

