// Code generated by go-bindata.
// sources:
// templates/cf_lb.tf
// templates/network.tf
// templates/network_security_group.tf
// templates/output.tf
// templates/resource_group.tf
// templates/storage.tf
// templates/tls.tf
// templates/vars.tf
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCf_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xc1\x8e\xe3\x36\x0c\xbd\xe7\x2b\x08\xa1\x87\x16\x58\x67\x26\xdd\xc1\x62\x2f\xbe\x14\x3d\xf4\x58\x60\x50\xf4\x28\xc8\x96\x1c\x0b\xa3\x48\x5a\x89\xca\x6c\x3a\xf0\xbf\x17\xb2\xec\x24\x56\x6c\x6f\xb2\xb9\xc5\x7c\xa4\xc8\xf7\x48\x4a\x47\xe6\x24\xab\x94\x00\xe2\x4f\x1e\xc5\x81\x72\x73\x60\x52\x13\xf8\xe8\x36\x9b\x8b\xd1\x36\xdf\x69\x2d\x1c\xd2\x8a\x79\xf1\xe5\x65\xce\x6c\x99\xf7\xef\xc6\xf1\x64\x73\xc2\x9b\xe0\x6a\x01\x84\xfd\x17\x9c\x70\x07\xea\x43\xa5\x05\x12\x20\x3e\x54\x3b\x02\x1f\x1b\x00\xcd\x0e\x02\xf2\x5f\x09\xe4\x97\x8f\x23\x73\x5b\xa1\x8f\x54\xf2\xae\xa8\x9b\x22\xf9\xee\xc8\x06\x80\x71\xee\x84\xf7\xd4\x3a\xd1\xc8\xef\xd7\x3e\xb5\xe4\x2e\x01\x7f\x8d\xee\x5a\xe0\xbb\x71\x6f\x34\x7e\xfe\x04\x5f\x3f\xc1\xee\xb7\x2e\x06\x18\x33\xa3\x7b\x67\x82\xa5\x29\x87\x3e\xc0\x98\xe9\x14\xb1\xad\x8c\x6f\xb7\x11\xd6\xbb\x1f\xa5\xc3\xc0\x14\x1d\xc3\xf7\xfe\x13\xf7\x0c\x31\xf1\x9f\x65\xc6\x86\x4a\xc9\x9a\x4a\x4b\x80\xa8\x6a\x85\x9a\x35\x8a\x54\x55\x48\x1b\x13\x54\xa6\x66\x28\x8d\x5e\xf7\x74\x62\x2f\x8d\x5e\x26\x64\xe2\x70\x17\x31\xe7\x2a\xe8\x28\x11\x53\xe7\x5c\x4a\x20\xfc\xa4\xd9\x41\xd6\x0b\x1c\x30\x6b\x95\x4c\x60\xba\x67\x28\xde\xd9\x89\x00\x19\x28\x5c\xa6\xe4\x86\x09\x66\x6d\x31\xfa\x2f\xd4\x76\x7f\x49\x73\x54\x96\x40\xfe\x15\x1e\xe1\x9f\x57\xb2\xd9\x00\xf8\xb7\xd0\x27\x77\x95\x5e\x09\xe4\x15\x99\xe6\xcc\x71\xfa\x7a\x60\x4a\x91\xde\x8e\x52\xb8\xdc\x9e\x2c\x35\xb3\xac\x96\x78\x82\x12\x7e\xdf\x00\x74\x31\xae\x75\xa6\x12\x79\xe4\x69\x1a\x7f\x47\xc8\xf3\x2e\xc5\xb0\xce\xa0\xa9\x8d\xca\x30\x7f\x21\xda\x01\xc0\xb0\x9d\x09\xf2\xa4\xcc\x5e\xea\x04\x69\x8d\xc7\x19\x48\x8f\xd8\x26\x9a\x27\x4b\xa2\x4b\x6e\x52\xa3\x70\x47\x96\x1d\xfd\xe5\x79\xa8\xfa\x20\x4c\x40\x98\x35\x06\xdd\x0a\xa6\xb0\x3d\x51\x6c\x9d\xf0\xad\x51\x1c\x4a\xf8\x3c\x72\x30\xe8\x18\x5b\xaa\x36\xba\x91\xfb\xe0\x92\x1c\x39\x2d\x73\xf3\x30\x38\x17\xd2\x16\x13\xe7\x94\x73\xda\x13\x54\xf2\x3b\x46\x57\xf2\xee\x29\xe1\xfd\xd3\x05\x9a\xbe\x6c\xe3\x32\xbb\x34\x4c\x9f\x76\xe3\x8c\x46\xa1\x39\xb5\xc6\xe1\x75\xae\x25\x90\xd1\x16\x4d\x2d\xa2\xf5\x83\x38\x11\x59\xc2\xcb\xcb\xe7\x47\x83\x28\xb3\xcf\x63\xcc\x04\xf9\x21\x83\x6b\x23\x55\x37\xc5\x18\x68\x81\xcd\xdb\xd1\xcf\x89\x3d\x23\xb6\xaa\x8a\x84\x9e\xc9\xaa\x58\xfd\x16\x33\x3c\xaf\x75\x63\x54\x56\xee\x4d\x36\x83\x4f\x31\xf8\x14\xd1\xe7\x26\x60\x64\x97\x7a\x81\x28\xf5\xde\xaf\xd5\x7b\xef\xf2\x2e\x2a\x51\xb4\xe8\x71\x98\x59\x63\xde\xa4\xe8\xaf\x43\x4e\x59\xd3\x48\x9d\x06\x98\xfc\x29\x7d\xbc\x13\xf9\x95\x28\x33\x27\x7e\x7d\x5e\x9c\xda\x6c\x6e\x9d\xf8\x16\x84\x47\x3a\x1d\xa4\x12\x76\x63\x80\x4a\xd0\xbc\xae\xe9\x72\xe8\x69\xf1\x5e\xf5\x17\xb8\x6c\xe2\x96\xbd\xd9\x2c\x25\x10\xef\x55\x11\x11\xe9\x58\xce\x90\x4d\xdb\x21\x7b\x02\x74\xe3\x5a\x49\xb7\xfe\x14\x37\x7e\xbd\xe8\xdc\xcb\xa1\xa4\x47\xa1\x85\x5b\x95\xe3\x61\x5d\x62\x68\xe5\x71\xe8\xc5\xc5\x9e\xa7\x8b\xfd\xf4\x83\xee\x9e\x8c\xe2\x0d\xd7\x6b\x53\x3d\xab\x6e\x2e\xf3\x00\xce\x04\xca\xcf\xc9\x04\xea\x39\x1d\x5b\xc3\x99\x10\xbb\x9c\xba\xa0\xd6\xae\x8c\x07\x69\x75\xdf\xc6\x5e\x88\x71\x29\x9e\xec\xfc\xec\xfc\xc1\x7c\xbc\xd5\xe3\xbf\x89\xc8\xd3\x0a\x7e\x4e\xcc\xb9\xed\x70\xfd\x62\xbb\x73\x31\x2c\x6c\x85\x87\xde\x6e\xd7\xe3\xdf\xc5\x37\x8c\x09\x68\x03\x02\x99\x7d\xb9\x44\x15\x8e\x4c\x85\x2c\xfc\x0c\x76\x7c\xa7\x5e\x5e\x88\xff\x07\x00\x00\xff\xff\x1f\xc4\x70\x4c\x93\x0b\x00\x00")

func templatesCf_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_lbTf,
		"templates/cf_lb.tf",
	)
}

func templatesCf_lbTf() (*asset, error) {
	bytes, err := templatesCf_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_lb.tf", size: 2963, mode: os.FileMode(480), modTime: time.Unix(1512421079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetworkTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcf\x4a\xc4\x30\x10\xc6\xef\x79\x8a\x61\xf0\xa0\xb0\x5b\x3c\x7a\xf1\x49\x44\x42\x36\x19\xd7\xe0\x36\x29\x93\x3f\x8a\x25\xef\x2e\xa9\xad\xd8\xd8\xe2\xe6\xfc\x9b\x99\xef\xf7\x85\x29\xf8\xc4\x9a\x00\xd5\x67\x62\xe2\x5e\x66\xcb\x31\xa9\x8b\x74\x14\xdf\x3d\xbf\x21\xe0\xc9\x87\x57\x84\x51\x00\x38\xd5\x13\x34\xef\x11\xf0\x66\xcc\x8a\x3b\x72\x59\x5a\x53\x8e\x15\x3f\x66\x87\x02\x40\x19\xc3\x14\x82\x0c\x83\xd2\xf4\xc3\x3f\xcd\x03\xf3\x05\xa9\xad\xe1\x82\xcf\x02\xe0\xe2\xb5\x8a\xd6\xbb\xcd\xfd\x4c\x67\xeb\x5d\xa9\x7b\x97\xd4\xf2\xcc\x3e\x0d\x72\x8a\x35\x71\x8b\xc4\x1a\xe8\x6a\xa4\xae\x52\x05\x45\x11\xe2\xaf\x74\x48\x27\x47\xf1\x5f\xd7\x1d\xd9\xb0\x92\x1d\x98\x5e\xec\xc7\xef\x81\x2a\xf8\x7d\xe1\xb6\xf5\x3e\xc0\xc3\x01\xee\xef\x76\xad\xae\xd6\x02\x68\x3e\x6e\xa3\x95\x86\x68\x6a\xf9\x0a\x00\x00\xff\xff\xdb\x9a\xf5\x1a\x0b\x02\x00\x00")

func templatesNetworkTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetworkTf,
		"templates/network.tf",
	)
}

func templatesNetworkTf() (*asset, error) {
	bytes, err := templatesNetworkTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network.tf", size: 523, mode: os.FileMode(480), modTime: time.Unix(1512421079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetwork_security_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\xcd\x6e\x9b\x40\x10\x80\xef\x3c\xc5\x68\xd5\x53\x24\x5b\x29\x81\xc8\x97\x1c\x7a\xec\xbd\x77\xb4\xde\x1d\xf0\xaa\x78\x07\xcd\x2e\x4e\xdb\x88\x77\xaf\x16\x6a\x27\x38\x38\xc2\xa8\x55\x85\x05\xe7\x6f\xfe\x76\x3e\x8d\x60\x74\x54\xb3\x42\x10\xf2\x57\xcd\xc8\xfb\xcc\xa2\x7f\x26\xfe\x9e\x39\x54\x35\x1b\xff\x33\x2b\x98\xea\x4a\x80\xd8\x92\xdb\x09\x78\x89\x00\xac\xdc\x23\x9c\x7d\x4f\x20\x3e\xbd\x1c\x24\xaf\xd1\x1e\x32\xa3\x9b\x55\x8b\x47\x00\x25\x29\xe9\x0d\xd9\x41\x98\xb1\x30\x64\x9b\xc0\x1d\x3b\xe9\xea\x65\x6d\x8d\x96\x3b\x36\xd6\x07\xd6\x21\xff\x3a\x50\x8d\x88\x22\x00\x2f\x0b\xd7\x36\x07\x80\xf6\x60\x98\xec\x1e\xad\x7f\xd7\x56\xa8\xd4\x44\x4d\x14\x5d\x31\xb8\xca\xaf\x18\x5b\xe5\xf3\x1e\x9a\xeb\x12\x05\x08\xf7\xd1\xae\x2f\x0e\xef\xba\x95\x57\x6c\x28\x24\x1b\x8e\x89\xef\xef\x23\x00\x6d\x18\xd5\xf9\x13\xbd\xe6\xfd\x6a\xb7\x54\x5b\x1d\xb2\x49\xa5\xd0\xb9\x8b\x1d\x7c\x29\x4b\x7a\xee\xaa\x92\x27\x45\xe5\x05\xee\x9b\xaa\x02\xf5\xe7\x39\x2b\x62\x9f\xb1\xb4\x05\xf6\xa9\xbb\xc0\x68\x74\xde\xd8\x76\x81\xef\xc0\x27\x10\x71\xfc\x26\x91\xd4\x9a\xd1\xb9\xac\x62\xcc\xcd\x8f\x0f\x12\x9d\x83\x47\x66\x48\x81\xde\x03\x8f\x50\x01\x60\x58\xde\x01\xa1\x86\xc1\x5e\xb6\xab\x44\x09\x81\x2b\x59\xa0\xf5\x13\x7c\x79\x13\x3c\x42\x9b\xcf\xf3\xd6\xe6\x71\xf3\xb8\x59\xc4\xe9\x8b\xd3\xad\x93\x78\xaa\x3b\xa7\xf8\x11\xfa\xc4\xf3\xd6\x27\x4e\xd3\x34\x5d\xfc\x39\xf9\xa3\xad\x9b\x60\x4d\x88\x1a\xe1\xca\xc3\xff\x70\xe5\xee\x2f\x99\x92\x3e\x2c\x9a\x9c\x34\x51\x8c\x7a\x57\x6f\x27\xa8\x72\x8c\x1c\xa1\x4b\x32\xef\xd3\xb2\xd9\x24\xc9\xa2\xcc\xab\x32\xf9\x6a\xe7\x7d\xf5\x0f\xcf\xcb\xcc\xff\x64\x92\xe4\x06\x2f\x8c\xca\xa7\xca\x52\x52\x31\xe5\xbc\x74\x81\xb7\xff\xe3\x92\xdc\xbc\x2e\xbf\x03\x00\x00\xff\xff\x77\x27\x82\x78\x45\x11\x00\x00")

func templatesNetwork_security_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetwork_security_groupTf,
		"templates/network_security_group.tf",
	)
}

func templatesNetwork_security_groupTf() (*asset, error) {
	bytes, err := templatesNetwork_security_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network_security_group.tf", size: 4421, mode: os.FileMode(480), modTime: time.Unix(1512163867, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOutputTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xdd\x6e\xa3\x30\x10\x85\xef\x79\x0a\x0b\xed\x35\x95\x22\x71\x13\x69\x9f\xc5\x32\x66\xda\xcc\xd6\xd8\xd6\xfc\xb0\xed\x56\x79\xf7\x15\x4b\x89\xe2\x26\x40\xb6\xb9\x0c\xdf\x7c\xe7\x68\xc6\x49\x25\xab\x98\xba\x4b\x7c\xb2\x11\xe4\x77\xa2\x57\x1b\xdd\x00\xb5\xf9\xa8\x8c\x19\x5d\x50\x30\x3f\x4d\xfd\xe3\xc3\xfd\x51\x02\x1a\xec\x88\x24\xea\xc2\x02\x37\xd3\x64\x33\x4d\x9c\xeb\xea\x5c\x55\x85\x90\xb5\x8b\x20\xdb\xbe\x99\xd9\xd4\x10\x70\x52\xf2\x60\x5f\x28\x69\xde\xd6\x95\xec\x76\x3b\x49\xe4\x5e\xc0\x3a\xef\x93\xc6\xbd\x9a\x25\xbc\x29\xee\xe1\xd9\x69\x10\xcb\xe0\x95\x50\xde\xe7\x2e\xab\xea\x65\xed\x25\xbe\x96\x00\x6f\x02\x14\x5d\xb0\xb8\x6e\xcc\xda\x05\xf4\x16\x3f\x25\x98\xad\xeb\x7b\x02\xe6\x52\xd5\x23\x81\x97\x44\xcb\xd7\x2f\xbe\x93\x48\xe6\xe3\xd3\xd3\x23\xde\xe3\xa1\x6d\xdb\xf6\x76\x15\xe3\xc0\x36\x13\x8e\x4e\xc0\xbe\xc2\xfb\x75\xc2\xf4\xfb\xd7\x5a\x42\xc1\x34\xcb\x60\x73\xf5\xa7\xcd\x30\x9c\xeb\xca\x18\x86\xc8\x28\x38\x4e\x0d\x85\x14\xee\x27\xce\x3d\xff\x3f\xf0\x32\x67\x53\x86\xc8\x7c\xba\xc9\x7c\x76\x81\x8b\xd0\x5f\x3a\xe4\x2e\xbd\x59\xa5\xf0\x8d\x7b\x1c\x0f\x87\x62\x69\xcb\x5b\xf0\xd8\xd3\x8d\x6e\x74\xd4\x5c\x03\xe5\x35\x31\x7e\x3e\x8c\xd5\xd9\x82\x28\x87\x59\x3b\xf6\x84\x59\x30\x45\x8b\xfd\xdd\xb5\x4d\x8a\x2f\xdc\xee\x49\x04\xa2\x8b\xb2\x65\xbc\x10\xbb\x2e\x1f\x10\xb6\x5d\x17\xe2\x51\x17\x83\x27\x90\x3d\xdf\x4c\xad\x39\xff\x06\x00\x00\xff\xff\xf8\xc9\xc8\x2d\x43\x05\x00\x00")

func templatesOutputTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesOutputTf,
		"templates/output.tf",
	)
}

func templatesOutputTf() (*asset, error) {
	bytes, err := templatesOutputTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/output.tf", size: 1347, mode: os.FileMode(480), modTime: time.Unix(1512163867, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResource_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\xce\x83\x20\x10\x85\xf7\x9c\xe2\x85\xfc\xdb\xdf\x1b\xf4\x2c\x64\xc4\x89\x25\x51\x30\x03\xb8\xa8\xe1\xee\x8d\x24\xb5\xda\xda\x2e\x3a\x4b\xe0\xbd\xf9\xf8\x84\x63\xc8\x62\x19\x9a\x6e\x59\x58\x46\xf3\x38\x31\xbd\x84\x3c\x69\xe8\x36\xc4\xab\xc6\xa2\x00\x4f\x23\x63\x9d\x0b\xf4\xdf\x32\x93\x34\xec\x67\xe3\xba\xa2\x15\x30\x04\x4b\xc9\x05\xff\xbc\x14\xee\x5d\xf0\x45\x2b\x05\x24\xea\x63\xed\x00\xd8\xcf\x4e\x82\x1f\xd9\xa7\xd3\xa2\xa2\x8a\x52\xef\x5c\x53\x6e\x07\x67\x8d\xfb\x80\x74\x36\xaf\xed\xff\x35\xb7\x67\xfd\x9a\xda\xf8\x81\xa3\x14\x73\xdc\x5a\x03\xe7\xfa\x9a\x75\x63\xb3\x3e\xaf\x35\xdb\x1f\x0c\x75\x9d\x70\x8c\x86\x86\xbd\xb7\x98\x28\x39\xfb\x8b\xb0\x7b\x00\x00\x00\xff\xff\x24\x8e\x1c\x0b\xc8\x01\x00\x00")

func templatesResource_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResource_groupTf,
		"templates/resource_group.tf",
	)
}

func templatesResource_groupTf() (*asset, error) {
	bytes, err := templatesResource_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resource_group.tf", size: 456, mode: os.FileMode(480), modTime: time.Unix(1512435900, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStorageTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\xcd\x6a\xc3\x30\x0c\xc7\xef\x7e\x0a\x61\x76\xee\x1b\xec\xbc\xfb\xfa\x00\x46\x71\x44\x66\x70\xa4\x20\x2b\x81\xad\xe4\xdd\x47\xbc\x36\x6d\x0d\xa5\x3d\x2e\xd7\xfc\xf4\xff\xb2\x52\x91\x59\x23\x81\xc7\x9f\x59\x49\xc7\x50\x4c\x14\x07\x0a\x18\xa3\xcc\x6c\x1e\x7c\x27\xe5\xcb\xc3\xc9\x01\x30\x8e\x04\xcd\xf7\x0e\xfe\xed\xb4\xa0\x1e\x4a\x1a\xa7\x4c\x81\x78\x09\xa9\x5f\xbd\x03\xb8\x88\x87\x41\x65\x9e\x42\xbd\xae\xf8\xc5\xeb\x1e\x38\x6c\x46\x87\x8d\x5a\xbd\x73\x00\x59\x22\x5a\x12\x6e\x1d\xaf\x96\x4a\x43\x12\xae\x5e\xe7\xb8\xc1\x12\x69\x0b\x1f\x0d\xb9\x47\xed\x6f\x39\xa5\x29\xa7\x3f\xfd\x60\xdf\x53\x0d\xf6\xf1\x79\xac\xc6\x86\x43\xa9\x7d\x01\x88\x97\xa4\xc2\x23\xb1\x5d\x6d\x6f\x2a\xae\x6e\x75\xee\xf1\x88\x51\xd8\x30\x31\xe9\xd3\x19\x6b\xd0\x8a\x3c\x18\x0e\x5e\x9e\x0e\xa0\x79\xc3\xb3\xc0\xdd\x7d\x83\x34\x02\x7b\xee\xed\x3f\x95\xb2\x4f\x34\x69\x5a\xd0\xc8\xbf\x5e\xbb\x18\x8d\x91\x72\x7e\x52\x7d\xc7\xfe\x75\xfd\x2e\x4b\xb7\x75\xff\x0d\x00\x00\xff\xff\x23\xe4\x2a\x58\x37\x03\x00\x00")

func templatesStorageTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesStorageTf,
		"templates/storage.tf",
	)
}

func templatesStorageTf() (*asset, error) {
	bytes, err := templatesStorageTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/storage.tf", size: 823, mode: os.FileMode(480), modTime: time.Unix(1512163867, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTlsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x02\x31\x0c\x05\xd0\x7d\x4e\xf1\xc9\x09\x5c\x88\xe0\xa2\x0b\xaf\xa0\x07\x08\xad\x04\x5b\x6c\xa9\x24\xb1\x30\x0c\x73\xf7\x79\xa6\x3e\xff\xf6\x56\x70\x74\x97\x9f\xb5\x95\x43\xe5\xab\x1b\x83\xcb\xf4\x2a\x6b\x38\x63\x27\x20\xf7\xcf\xb4\x16\x75\x20\x81\x9f\xaf\x07\x13\x60\x9e\xa5\xb4\x70\x20\xe1\x7a\xb9\xdf\xe8\xa0\x33\x00\x00\xff\xff\x52\x4d\xac\xad\x51\x00\x00\x00")

func templatesTlsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesTlsTf,
		"templates/tls.tf",
	)
}

func templatesTlsTf() (*asset, error) {
	bytes, err := templatesTlsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tls.tf", size: 81, mode: os.FileMode(480), modTime: time.Unix(1512163867, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xd1\x4a\xc5\x30\x0c\x40\xdf\xfb\x15\xa1\xf8\x3c\x9d\x88\x6f\x7e\xcb\xe8\xda\x28\xc1\x2e\x1d\x69\x57\xc1\xb1\x7f\x97\xad\x50\xb5\x94\x7b\xb7\xb7\x9c\x73\xa0\x49\x36\x42\x66\xf6\x08\x1a\x39\x4f\xe4\x34\xec\x87\x52\xbf\x53\xc1\x0f\x0a\xdc\x4e\x23\x2d\xab\xc7\xa9\x9f\xc4\x6d\x8e\x56\x68\x4d\x14\xb8\x83\x13\xb2\xe1\xd4\x01\xd6\x13\xde\x02\x11\xad\x60\x6a\x21\x63\xfa\x0a\xf2\x39\x59\x72\xa2\x61\x57\x00\x0e\xdf\xcd\xe6\x13\xbc\x81\x1e\x9f\x86\xeb\x7f\x1c\x5f\xb5\xfa\x97\x11\x27\x14\x36\xfe\x4e\xf7\xfc\x72\x75\xab\x84\x4c\x0e\x05\xb4\xf9\xde\x04\x65\x29\x45\xb3\xe9\x59\x3e\xec\xd9\xc8\xd0\x80\x43\x2b\x80\xba\x37\x94\xaf\xca\x15\x5c\x5a\xbd\x42\xab\x55\xf0\x57\x2b\x37\xe9\x68\x05\x1c\xe7\xeb\x7f\x02\x00\x00\xff\xff\xf5\xa0\x00\x27\xe3\x01\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 483, mode: os.FileMode(480), modTime: time.Unix(1512163867, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cf_lb.tf": templatesCf_lbTf,
	"templates/network.tf": templatesNetworkTf,
	"templates/network_security_group.tf": templatesNetwork_security_groupTf,
	"templates/output.tf": templatesOutputTf,
	"templates/resource_group.tf": templatesResource_groupTf,
	"templates/storage.tf": templatesStorageTf,
	"templates/tls.tf": templatesTlsTf,
	"templates/vars.tf": templatesVarsTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cf_lb.tf": &bintree{templatesCf_lbTf, map[string]*bintree{}},
		"network.tf": &bintree{templatesNetworkTf, map[string]*bintree{}},
		"network_security_group.tf": &bintree{templatesNetwork_security_groupTf, map[string]*bintree{}},
		"output.tf": &bintree{templatesOutputTf, map[string]*bintree{}},
		"resource_group.tf": &bintree{templatesResource_groupTf, map[string]*bintree{}},
		"storage.tf": &bintree{templatesStorageTf, map[string]*bintree{}},
		"tls.tf": &bintree{templatesTlsTf, map[string]*bintree{}},
		"vars.tf": &bintree{templatesVarsTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

