// Code generated by go-bindata.
// sources:
// templates/cf_lb.tf
// templates/network.tf
// templates/network_security_group.tf
// templates/output.tf
// templates/resource_group.tf
// templates/storage.tf
// templates/tls.tf
// templates/vars.tf
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCf_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x3f\x8f\xe3\xb6\x13\xad\x7f\xfa\x14\x04\x7f\x69\xa5\xb5\x6f\x8d\x43\x1a\x37\x49\x8a\x2b\x03\x2c\x82\x94\xc4\x48\x1a\x5b\xc4\xd2\x24\x8f\x1c\x79\xcf\x39\xe8\xbb\x07\x14\x45\xcb\x92\xa5\x8d\x77\xdd\x79\xf4\xde\x70\xf8\xe6\x0f\xe7\x0c\x4e\x42\xa9\x90\x71\x7f\xf1\x84\x27\x51\x9b\x13\x48\xcd\xd9\xcf\x8c\x31\xba\x58\x64\x7b\xc6\x3d\x39\xa9\x8f\x3c\xeb\xb2\x6c\xc4\xdb\xc3\x0f\x51\xa1\x23\x51\x82\xc7\xaf\xbb\x07\x19\x16\xbc\x7f\x33\xae\x5e\x85\x3b\xf4\xa6\x75\x15\x32\x0e\xff\xb4\x0e\xdd\x49\xf8\xb6\xd4\x48\x9c\x71\xdf\x96\xdb\xc8\xd3\x70\x42\x36\xff\xed\x19\xff\xe5\xe7\x19\x5c\x81\xfa\x2c\x64\xdd\xe5\xd5\x21\x8f\xdc\x2d\xcf\x18\x83\xba\x76\xe8\xbd\xb0\x0e\x0f\xf2\xc7\xc8\xd9\x6e\x8a\x4d\xb1\x2d\x36\x4f\x5f\x76\x01\x96\xce\x17\x47\x67\x5a\x2b\xe2\x49\xbd\xeb\x14\xcf\x14\x51\x94\xc6\x37\x45\x80\x75\x81\x7e\x96\x8e\x5a\x50\x42\x23\xbd\x19\xf7\x1a\xf9\x13\xfa\x0c\x31\xe1\x2f\xde\xdf\xb6\xa5\x92\x95\x90\x96\x33\xae\xca\x77\x04\x78\x4f\x08\x55\xe6\xd2\x86\x00\x95\xa9\x80\xa4\xd1\xef\x33\x1d\x1e\xa5\xd1\xdd\xaa\x20\x13\xc2\x43\xc2\x5c\x6f\x21\x52\x22\x40\x5d\x63\xd9\x33\x5e\x5f\x34\x9c\x64\xd5\x6b\xf0\x7f\xf6\xbb\x43\x20\x64\xa0\x19\x58\xab\xe4\x00\x3b\x02\xe1\x1b\x5c\x16\x34\xba\x41\x89\x01\xc5\x19\x1f\x24\x5e\x97\xec\x4e\x29\xb0\x36\x4f\xfc\x95\xbb\x3f\x7e\xe5\x25\xa9\xf7\x8c\xff\x8d\x9e\xd8\x5f\x2f\x3c\x63\x19\x63\xfe\xb5\xed\xa3\xbb\x8b\x6f\xcf\xf8\x0b\x81\xae\xc1\xd5\xe2\xe5\x04\x4a\xf1\x1e\x45\x12\xdd\x32\x2a\x7e\xaf\xc0\x42\x25\xe9\x72\xfd\xfe\x25\x63\xac\xcb\x42\x02\x9c\x29\xf1\xf6\xac\x3d\xe3\x7f\x06\xdb\x66\x1b\xa9\xd6\x19\x32\x95\x51\xe1\xc3\x37\x22\x3b\x58\x81\x9a\x60\x79\x52\xe6\x28\x75\xb4\x35\xc6\x53\xb0\xf5\xa6\x22\x2a\x38\x19\x1f\x5d\xc4\x49\x4d\xe8\xce\x10\x3c\x7e\xdd\x0c\xe1\x9f\xd0\xb4\x34\x1a\x5a\xdd\x20\x28\x6a\x2e\x82\x1a\x87\xbe\x31\xaa\x66\x7b\xf6\xdc\x07\x1d\xf4\x19\x92\x11\xea\xa6\x32\xfa\x20\x8f\xad\x8b\x9a\x2e\x88\xb6\x54\xf7\x03\x3f\x97\x36\x9f\xf0\x63\x80\x71\x3c\x08\x59\xdf\xd5\xf2\x62\x97\xca\xba\x7b\x8a\x14\xff\x34\x42\xa3\xa5\x08\xd3\x69\xcc\x7d\x8c\xfe\xe0\x8c\x26\xd4\xb5\xb0\xc6\xd1\x4a\xc8\x09\x13\x20\x0d\x91\xf5\x83\xee\x81\x31\xc2\x76\xbb\xe7\x94\xc8\x8f\x3a\x55\xe6\xb8\xe6\x73\xf7\x7c\x1f\xea\x67\x95\x4e\x0e\x56\xa4\xbe\xef\x7f\x59\x4f\x25\xbf\x22\x0a\x55\x06\xa9\x79\xba\x70\x09\xd5\x6b\x88\xec\x3a\xc1\x8d\x51\xb3\x42\xbe\x8b\x66\xe0\xe4\x03\x27\x0f\x9c\x31\x2f\xc9\x63\xd0\x5b\x78\x24\x92\xfa\xe8\x97\xfb\x70\x69\xd0\xad\x8f\xf0\xbc\xc4\xbc\x21\x4f\x43\x33\x1a\xf3\x2a\xb1\x7f\x20\x6b\x01\x87\x83\xd4\xa1\x33\xf7\x8c\xff\x21\x7d\x78\x12\xeb\x85\xb4\xdc\x9c\xf8\xeb\x66\xda\x97\xf3\x80\xc6\x26\x75\xf8\xbd\x45\x4f\x22\xb5\x57\x82\x6c\x93\x83\x12\xc5\xfc\x5e\xd3\xf6\xef\x85\xf6\x5e\xf5\x4f\xba\x3c\x84\x59\x3a\x1f\x16\xde\xab\x3c\x7c\x8d\x47\xd6\x40\x30\x2a\x3f\x5b\x06\xba\x34\x3b\xe2\x63\x3f\xc5\x25\xeb\x4d\x9f\xf4\x79\x50\xd2\x13\x6a\x74\xef\xe6\xe1\xb3\x79\x09\x27\x28\x4f\x43\x31\xae\x16\xfb\x44\xa5\x4f\x54\xf9\xa4\x37\xef\x24\xbf\x71\xbc\xd6\xf5\x8b\xb9\x5e\xe0\x7f\x1b\x39\xb3\xac\xad\x9c\x3a\x4b\x60\xd4\x3d\xd5\x8d\x33\x6d\x68\x01\xe1\x5a\x85\xff\x2d\xff\xa3\x9a\xbb\xef\xa9\x58\x82\x5f\xd1\x2f\x7b\x4b\xce\x7e\x03\x1f\x1e\xfe\xf0\x6f\x52\x08\xe2\x7e\xe6\x7c\x38\xd3\x4b\xb3\xe3\x76\xa9\x7b\x70\x6c\xac\x8c\x8c\x0f\xad\x77\xb7\xb3\xa1\x0b\x6b\x8e\x69\xc9\xb6\xc4\x38\x58\x9b\x96\x96\xde\x61\xd8\x57\xfe\x77\x06\xd5\xce\x5c\x2f\x2c\x39\x45\x3a\xe6\xba\x40\xfe\x1b\x00\x00\xff\xff\x52\x2c\x65\x2c\xd1\x0b\x00\x00")

func templatesCf_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_lbTf,
		"templates/cf_lb.tf",
	)
}

func templatesCf_lbTf() (*asset, error) {
	bytes, err := templatesCf_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_lb.tf", size: 3025, mode: os.FileMode(480), modTime: time.Unix(1512090737, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetworkTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x5d\x4e\x86\x30\x10\x45\xdf\xbb\x8a\xc9\xc4\x57\xd8\x81\x2b\x31\xa6\x29\xed\x88\x8d\xd0\x92\xe9\x8f\x46\xd2\xbd\x9b\x12\x30\xa1\x42\xfc\xfa\x7c\x66\x7a\xcf\x1d\xa6\xe0\x13\x6b\x02\x54\xdf\x89\x89\x67\x99\x2d\xc7\xa4\x26\xe9\x28\x7e\x7a\xfe\x40\xc0\xc1\x87\x77\x84\x55\x00\x38\x35\x13\x34\xef\x19\xf0\x69\xcd\x8a\x7b\x72\x59\x5a\x53\xba\x8a\x77\xd9\xa1\x00\x50\xc6\x30\x85\x20\xc3\xa2\x34\xfd\xf2\x2f\xfb\xc0\xfe\x83\xd4\xd6\x70\xc1\x57\x01\x30\x79\xad\xa2\xf5\xee\x72\x3f\xd3\x68\xbd\x2b\x75\xef\x91\x5a\x8e\xec\xd3\x22\xb7\x58\x1b\x77\x48\x9c\x81\xbe\x46\xea\x2b\x55\x50\x14\x21\xfe\x4a\x87\x34\x38\x8a\xff\xba\xde\xc8\x86\x93\xec\xc2\xf4\x66\xbf\xda\x81\xb3\xec\x8d\xc3\xc3\x12\x00\xcd\x99\x2e\x3a\x68\x88\xa6\x84\x9f\x00\x00\x00\xff\xff\x2b\x4f\xd2\x88\xf9\x01\x00\x00")

func templatesNetworkTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetworkTf,
		"templates/network.tf",
	)
}

func templatesNetworkTf() (*asset, error) {
	bytes, err := templatesNetworkTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network.tf", size: 505, mode: os.FileMode(480), modTime: time.Unix(1512068137, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetwork_security_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\xcd\x6e\x9b\x40\x10\x80\xef\x3c\xc5\x68\xd5\x53\x24\x5b\x29\x81\xc8\x97\x1c\x7a\xec\xbd\x77\xb4\xde\x1d\xf0\xaa\x78\x07\xcd\x2e\x4e\xdb\x88\x77\xaf\x16\x6a\x27\x38\x38\xc2\xa8\x55\x85\x05\xe7\x6f\xfe\x76\x3e\x8d\x60\x74\x54\xb3\x42\x10\xf2\x57\xcd\xc8\xfb\xcc\xa2\x7f\x26\xfe\x9e\x39\x54\x35\x1b\xff\x33\x2b\x98\xea\x4a\x80\xd8\x92\xdb\x09\x78\x89\x00\xac\xdc\x23\x9c\x7d\x4f\x20\x3e\xbd\x1c\x24\xaf\xd1\x1e\x32\xa3\x9b\x55\x8b\x47\x00\x25\x29\xe9\x0d\xd9\x41\x98\xb1\x30\x64\x9b\xc0\x1d\x3b\xe9\xea\x65\x6d\x8d\x96\x3b\x36\xd6\x07\xd6\x21\xff\x3a\x50\x8d\x88\x22\x00\x2f\x0b\xd7\x36\x07\x80\xf6\x60\x98\xec\x1e\xad\x7f\xd7\x56\xa8\xd4\x44\x4d\x14\x5d\x31\xb8\xca\xaf\x18\x5b\xe5\xf3\x1e\x9a\xeb\x12\x05\x08\xf7\xd1\xae\x2f\x0e\xef\xba\x95\x57\x6c\x28\x24\x1b\x8e\x89\xef\xef\x23\x00\x6d\x18\xd5\xf9\x13\xbd\xe6\xfd\x6a\xb7\x54\x5b\x1d\xb2\x49\xa5\xd0\xb9\x8b\x1d\x7c\x29\x4b\x7a\xee\xaa\x92\x27\x45\xe5\x05\xee\x9b\xaa\x02\xf5\xe7\x39\x2b\x62\x9f\xb1\xb4\x05\xf6\xa9\xbb\xc0\x68\x74\xde\xd8\x76\x81\xef\xc0\x27\x10\x71\xfc\x26\x91\xd4\x9a\xd1\xb9\xac\x62\xcc\xcd\x8f\x0f\x12\x9d\x83\x47\x66\x48\x81\xde\x03\x8f\x50\x01\x60\x58\xde\x01\xa1\x86\xc1\x5e\xb6\xab\x44\x09\x81\x2b\x59\xa0\xf5\x13\x7c\x79\x13\x3c\x42\x9b\xcf\xf3\xd6\xe6\x71\xf3\xb8\x59\xc4\xe9\x8b\xd3\xad\x93\x78\xaa\x3b\xa7\xf8\x11\xfa\xc4\xf3\xd6\x27\x4e\xd3\x34\x5d\xfc\x39\xf9\xa3\xad\x9b\x60\x4d\x88\x1a\xe1\xca\xc3\xff\x70\xe5\xee\x2f\x99\x92\x3e\x2c\x9a\x9c\x34\x51\x8c\x7a\x57\x6f\x27\xa8\x72\x8c\x1c\xa1\x4b\x32\xef\xd3\xb2\xd9\x24\xc9\xa2\xcc\xab\x32\xf9\x6a\xe7\x7d\xf5\x0f\xcf\xcb\xcc\xff\x64\x92\xe4\x06\x2f\x8c\xca\xa7\xca\x52\x52\x31\xe5\xbc\x74\x81\xb7\xff\xe3\x92\xdc\xbc\x2e\xbf\x03\x00\x00\xff\xff\x77\x27\x82\x78\x45\x11\x00\x00")

func templatesNetwork_security_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetwork_security_groupTf,
		"templates/network_security_group.tf",
	)
}

func templatesNetwork_security_groupTf() (*asset, error) {
	bytes, err := templatesNetwork_security_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network_security_group.tf", size: 4421, mode: os.FileMode(480), modTime: time.Unix(1512068137, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOutputTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xdd\x6e\xa3\x30\x10\x85\xef\x79\x0a\x0b\xed\x35\x95\x22\x71\x13\x69\x9f\xc5\x32\x66\xda\xcc\xd6\xd8\xd6\xfc\xb0\xed\x56\x79\xf7\x15\x4b\x89\xe2\x26\x40\xb6\xb9\x0c\xdf\x7c\xe7\x68\xc6\x49\x25\xab\x98\xba\x4b\x7c\xb2\x11\xe4\x77\xa2\x57\x1b\xdd\x00\xb5\xf9\xa8\x8c\x19\x5d\x50\x30\x3f\x4d\xfd\xe3\xc3\xfd\x51\x02\x1a\xec\x88\x24\xea\xc2\x02\x37\xd3\x64\x33\x4d\x9c\xeb\xea\x5c\x55\x85\x90\xb5\x8b\x20\xdb\xbe\x99\xd9\xd4\x10\x70\x52\xf2\x60\x5f\x28\x69\xde\xd6\x95\xec\x76\x3b\x49\xe4\x5e\xc0\x3a\xef\x93\xc6\xbd\x9a\x25\xbc\x29\xee\xe1\xd9\x69\x10\xcb\xe0\x95\x50\xde\xe7\x2e\xab\xea\x65\xed\x25\xbe\x96\x00\x6f\x02\x14\x5d\xb0\xb8\x6e\xcc\xda\x05\xf4\x16\x3f\x25\x98\xad\xeb\x7b\x02\xe6\x52\xd5\x23\x81\x97\x44\xcb\xd7\x2f\xbe\x93\x48\xe6\xe3\xd3\xd3\x23\xde\xe3\xa1\x6d\xdb\xf6\x76\x15\xe3\xc0\x36\x13\x8e\x4e\xc0\xbe\xc2\xfb\x75\xc2\xf4\xfb\xd7\x5a\x42\xc1\x34\xcb\x60\x73\xf5\xa7\xcd\x30\x9c\xeb\xca\x18\x86\xc8\x28\x38\x4e\x0d\x85\x14\xee\x27\xce\x3d\xff\x3f\xf0\x32\x67\x53\x86\xc8\x7c\xba\xc9\x7c\x76\x81\x8b\xd0\x5f\x3a\xe4\x2e\xbd\x59\xa5\xf0\x8d\x7b\x1c\x0f\x87\x62\x69\xcb\x5b\xf0\xd8\xd3\x8d\x6e\x74\xd4\x5c\x03\xe5\x35\x31\x7e\x3e\x8c\xd5\xd9\x82\x28\x87\x59\x3b\xf6\x84\x59\x30\x45\x8b\xfd\xdd\xb5\x4d\x8a\x2f\xdc\xee\x49\x04\xa2\x8b\xb2\x65\xbc\x10\xbb\x2e\x1f\x10\xb6\x5d\x17\xe2\x51\x17\x83\x27\x90\x3d\xdf\x4c\xad\x39\xff\x06\x00\x00\xff\xff\xf8\xc9\xc8\x2d\x43\x05\x00\x00")

func templatesOutputTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesOutputTf,
		"templates/output.tf",
	)
}

func templatesOutputTf() (*asset, error) {
	bytes, err := templatesOutputTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/output.tf", size: 1347, mode: os.FileMode(480), modTime: time.Unix(1512068061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResource_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x8a\xc4\x20\x10\x45\xf7\x9e\xe2\x23\xb3\x9d\xdc\x60\xce\x22\x15\x53\x64\x84\x44\x43\xa9\x59\x4c\xf0\xee\x83\x42\xa7\x3b\x24\xdd\x0d\x5d\x4b\xf9\xf5\xeb\xf9\x84\x63\xc8\x62\x19\x9a\xfe\xb2\xb0\xcc\xe6\xf6\x62\x46\x09\x79\xd1\xd0\x7d\x88\xbf\x1a\x9b\x02\x3c\xcd\x8c\x3a\x3f\xd0\x5f\xdb\x4a\xd2\xb1\x5f\x8d\x1b\xca\x77\xcb\x28\x60\x0a\x96\x92\x0b\xfe\x9e\x10\x1e\x5d\xf0\x45\x2b\x05\x24\x1a\x63\x2b\x02\xd8\xaf\x4e\x82\x9f\xd9\xa7\x53\x5b\x2d\x2a\xaa\x28\x75\x86\x5b\x72\x3f\x39\x6b\xdc\x13\xae\xab\x79\xcf\xfa\x72\x6b\xe7\x07\x8e\x66\xcc\xf1\x6a\x5b\xb8\x76\xd8\xd5\x8b\x5d\x8d\xb7\x9a\xfd\x0f\x86\x86\x41\x38\x46\x43\xd3\xa3\xb7\x98\x28\x39\xfb\x89\xb0\xff\x00\x00\x00\xff\xff\x58\xec\xbb\xb4\xcd\x01\x00\x00")

func templatesResource_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResource_groupTf,
		"templates/resource_group.tf",
	)
}

func templatesResource_groupTf() (*asset, error) {
	bytes, err := templatesResource_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resource_group.tf", size: 461, mode: os.FileMode(480), modTime: time.Unix(1512068137, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStorageTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\xcd\x6e\x83\x30\x0c\xc7\xef\x79\x0a\x2b\xda\x99\x37\xd8\x79\xf7\xf5\x01\x22\x13\x2c\x16\x29\xd8\xc8\x31\x48\x5b\xc5\xbb\x4f\x64\x2d\x2b\x48\x55\x7b\x2c\x57\x7e\xfe\x7f\x45\xa9\xc8\xa4\x91\xc0\xe3\xcf\xa4\xa4\x43\x28\x26\x8a\x3d\x05\x8c\x51\x26\x36\x0f\xbe\x95\xf2\xe5\xe1\xec\x00\x18\x07\x82\xc3\xf7\x0e\xfe\xed\x3c\xa3\x36\x25\x0d\x63\xa6\x40\x3c\x87\xd4\x2d\xde\x01\x5c\xc5\x43\xaf\x32\x8d\xa1\x5e\x57\xfc\xea\xb5\x07\x9a\xd5\xa8\x59\xa9\xc5\x3b\x07\x90\x25\xa2\x25\xe1\xbd\x8d\x52\x9f\x84\xab\xfe\x25\x62\xb0\x44\x7a\xcc\x74\x32\xe4\x0e\xb5\xbb\xe5\x94\xc6\x9c\xfe\x34\x83\x7d\x8f\x35\xcc\xc7\xe7\xa9\x9a\x19\xf6\xa5\x76\x04\x20\x9e\x93\x0a\x0f\xc4\xf6\x6f\x7b\x53\x6b\x71\x8b\x73\xf7\x87\x8b\xc2\x86\x89\x49\x1f\x4e\x57\x83\x56\xe4\xce\x58\xf0\xf4\x5c\x00\x87\x77\xbb\x08\xec\xee\x0f\xc8\x41\x60\xcb\xbd\xfe\xa7\x52\xb6\x89\x46\x4d\x33\x1a\xf9\xe7\x6b\x17\xa3\x21\x52\xce\x0f\xaa\x6f\xd8\x4b\xd7\x6f\xb3\xb4\x6b\xf7\xdf\x00\x00\x00\xff\xff\x0f\x2e\x7d\x9b\x2b\x03\x00\x00")

func templatesStorageTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesStorageTf,
		"templates/storage.tf",
	)
}

func templatesStorageTf() (*asset, error) {
	bytes, err := templatesStorageTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/storage.tf", size: 811, mode: os.FileMode(480), modTime: time.Unix(1512068297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTlsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x02\x31\x0c\x05\xd0\x7d\x4e\xf1\xc9\x09\x5c\x88\xe0\xa2\x0b\xaf\xa0\x07\x08\xad\x04\x5b\x6c\xa9\x24\xb1\x30\x0c\x73\xf7\x79\xa6\x3e\xff\xf6\x56\x70\x74\x97\x9f\xb5\x95\x43\xe5\xab\x1b\x83\xcb\xf4\x2a\x6b\x38\x63\x27\x20\xf7\xcf\xb4\x16\x75\x20\x81\x9f\xaf\x07\x13\x60\x9e\xa5\xb4\x70\x20\xe1\x7a\xb9\xdf\xe8\xa0\x33\x00\x00\xff\xff\x52\x4d\xac\xad\x51\x00\x00\x00")

func templatesTlsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesTlsTf,
		"templates/tls.tf",
	)
}

func templatesTlsTf() (*asset, error) {
	bytes, err := templatesTlsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tls.tf", size: 81, mode: os.FileMode(480), modTime: time.Unix(1512068061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x4e\xc4\x20\x10\x86\xef\x7d\x8a\x09\xf1\xbc\xba\xc6\x78\xf3\x59\x1a\xb6\x1d\x37\x13\xe9\x40\x86\x29\x46\x9b\xbe\xbb\xa1\x44\x54\x42\x5c\xb8\xf1\x7d\x3f\x99\xf9\x93\x15\xb2\x17\x87\x60\x90\xd3\x48\xb3\x81\x6d\x1f\x86\x9f\x57\xc1\x2b\x79\x36\xb0\x0d\x00\xfa\x11\x10\x5e\xc0\x44\x15\xe2\xab\x19\xfe\x88\x91\x96\xe0\x70\xec\xff\x12\xd7\x4b\x9c\x84\x82\x92\xe7\x0e\x56\x64\xcb\xda\x01\x93\x23\xfc\x0f\x44\x9c\x04\xb5\x85\x8c\xfa\xee\xe5\x6d\x9c\x68\x96\x32\xf9\x8c\xaf\x76\x75\x9a\x87\x3f\x3f\x9c\x8e\x7b\x7f\x7e\x6e\x36\x20\x56\x14\xb6\xee\x46\xee\xf1\xe9\xc8\x05\xf1\x89\x66\x14\x30\xf6\x73\x15\x94\xa5\x24\x9a\x4d\x73\xf2\x6e\x4b\x56\x4e\x0d\xd8\x4d\x2e\xf4\x7b\x6f\x28\xa7\xca\x15\x1c\x5a\x6d\xa1\xd5\x2a\xf8\xad\x95\x4e\x3a\x5a\x01\x7b\x9e\xfe\x2b\x00\x00\xff\xff\xa6\xc7\xe4\x1f\xf6\x01\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 502, mode: os.FileMode(480), modTime: time.Unix(1512068137, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cf_lb.tf": templatesCf_lbTf,
	"templates/network.tf": templatesNetworkTf,
	"templates/network_security_group.tf": templatesNetwork_security_groupTf,
	"templates/output.tf": templatesOutputTf,
	"templates/resource_group.tf": templatesResource_groupTf,
	"templates/storage.tf": templatesStorageTf,
	"templates/tls.tf": templatesTlsTf,
	"templates/vars.tf": templatesVarsTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cf_lb.tf": &bintree{templatesCf_lbTf, map[string]*bintree{}},
		"network.tf": &bintree{templatesNetworkTf, map[string]*bintree{}},
		"network_security_group.tf": &bintree{templatesNetwork_security_groupTf, map[string]*bintree{}},
		"output.tf": &bintree{templatesOutputTf, map[string]*bintree{}},
		"resource_group.tf": &bintree{templatesResource_groupTf, map[string]*bintree{}},
		"storage.tf": &bintree{templatesStorageTf, map[string]*bintree{}},
		"tls.tf": &bintree{templatesTlsTf, map[string]*bintree{}},
		"vars.tf": &bintree{templatesVarsTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

