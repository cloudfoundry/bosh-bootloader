// Code generated by go-bindata.
// sources:
// templates/cf_dns.tf
// templates/cf_lb.tf
// templates/concourse_lb.tf
// templates/network.tf
// templates/network_security_group.tf
// templates/output.tf
// templates/resource_group.tf
// templates/storage.tf
// templates/tls.tf
// templates/vars.tf
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCf_dnsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x93\xc1\x6a\x72\x31\x10\x85\xf7\xf7\x29\x86\xe0\x4a\x30\x08\xff\xee\x07\xe9\x83\x88\x0c\x63\x32\xda\xc0\xbd\x49\x48\x72\x2d\x2a\x79\xf7\x92\x14\xad\xcd\xad\xb6\x3b\x17\xcd\x36\x27\x73\xce\x7c\x99\xd1\x94\x08\x04\x9d\xc6\xc0\x61\x40\x3f\x6e\x7b\xa3\xd0\x78\x01\x42\xed\x16\xfd\x56\xc0\xb9\x03\xb0\x34\x30\x34\x67\x05\x62\x76\x3e\x50\x90\x6c\x0f\x68\x74\x5e\x54\xfd\xc2\x78\xd1\x01\x04\x8e\x6e\x0c\x8a\x71\x1f\xdc\xe8\xb1\xbe\xbf\x3e\xf8\xf6\x72\x05\x42\xc0\x0b\x5c\x82\x7c\xd5\xc8\xad\x8b\xaf\x72\x2e\x8b\x74\xbd\xdc\xc0\x7f\xb8\x53\x27\x17\x73\xcd\x9e\xad\x8e\xe8\xec\x6d\xda\xf5\xb5\x49\xf2\xbe\x37\x8a\x92\x71\x16\xf7\x94\xf8\x8d\x8e\x52\xed\xc4\xa6\xcb\x5d\x77\xa9\xf9\x89\x44\xdb\x88\x27\x67\xb9\x12\xf9\x05\x8e\x78\x8c\x89\x07\xd4\x6e\x20\x63\xf3\x93\x61\x74\x00\x89\xf6\xb1\xa6\x06\x60\x7b\x30\xc1\xd9\x81\x6d\x9a\x7c\x5f\x09\x9a\xef\x13\x20\x0c\xac\x5c\xd0\x3f\x53\x98\x97\x4a\x05\x18\x36\x82\xea\xd8\x52\x95\x6a\x27\xaf\x1f\xf7\xd4\xa9\x49\xa9\x6f\xbb\x29\xe6\xff\x96\xcb\x8f\x68\xa5\xfb\xd8\xdc\xae\xc5\xec\x5c\x16\x48\x4e\xf6\x47\xd6\x6d\x90\xc6\x23\x69\x1d\x38\xc6\xfc\x68\xbe\x6e\xe8\x96\xcc\x0f\xf9\x56\xc1\xdf\x42\x3c\xa5\x5b\x6d\x5b\xb8\xef\x01\x00\x00\xff\xff\x1d\xee\x47\x58\xcb\x04\x00\x00")

func templatesCf_dnsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_dnsTf,
		"templates/cf_dns.tf",
	)
}

func templatesCf_dnsTf() (*asset, error) {
	bytes, err := templatesCf_dnsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_dns.tf", size: 1227, mode: os.FileMode(480), modTime: time.Unix(1529087538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\x06\x42\x0f\x6d\xb0\x72\x9c\x1f\x14\x41\x01\xa1\x68\xd1\x16\xdd\x43\x4f\xdb\x43\x81\xa2\x20\x28\x69\x64\x13\xa1\x49\x95\xa4\x9c\x75\x17\x7e\xf7\x82\xa4\xa4\x58\x34\xe5\x38\xc1\x7a\xeb\x14\xc9\xcd\x9a\x5f\xce\x7c\x33\x1c\x4e\xd6\x54\x31\x5a\x70\x84\x54\x6f\xb4\xc1\x15\xa9\xe4\x8a\x32\x91\xc2\xa7\x6d\x92\x3c\x12\x9b\xfa\x23\x29\x51\x19\x52\x50\x8d\xdf\xde\xc6\xc8\x0d\xd5\xfa\x41\xaa\xca\xd3\x14\x6a\xd9\xaa\x12\x21\xa5\xff\xb4\x0a\xd5\x8a\xe8\xb6\x10\x68\x52\x48\xcb\x3a\xd3\xd6\x40\x02\x20\xe8\x0a\x21\xfc\xcb\x21\xfd\xea\xd3\x9a\xaa\x19\x8a\x35\x61\xd5\x36\xf3\x02\x09\x00\xad\x2a\x85\x5a\x93\x46\x61\xcd\x3e\xee\xb2\x97\xac\x52\xde\xc0\xd7\x56\x52\xa0\x79\x90\xea\x9e\xd8\xcf\xef\xe0\xee\x1d\x5c\x7d\xb3\xb5\x0a\x7a\xaf\xc8\x42\xc9\xb6\x21\xde\xfc\x60\x2f\x46\xcd\x73\x48\x53\xf8\x1e\xfa\x53\x8c\x79\x66\x85\xd4\xcb\xd9\xc5\xcc\xb2\xfe\x39\xff\x0b\xbe\x83\x09\x3d\xce\xfa\x9a\x29\xd3\x52\x4e\x7a\xef\xbc\x81\xde\xfa\x5a\xa0\x89\xdb\x0c\xe4\xe2\x46\x07\xf1\x6d\x9a\x44\xe3\xdf\x5b\xd5\x58\xb6\x8a\x99\x8d\xf7\xce\xe5\x63\x3a\x19\x91\x5c\xd8\x93\x70\x59\x52\xc3\xa4\x88\xb2\x2a\x5c\x30\x29\x26\xe3\xfd\x85\xc2\x9d\x00\x18\xba\xd0\xee\x64\x00\x28\xd6\x4c\x49\xb1\x42\x61\xf6\xce\x64\x1d\xdd\x1e\x19\x33\xd5\x72\xf4\x10\x5e\x1a\xd3\x1c\x00\xf1\x01\x2c\x3b\xc9\x04\xa0\x51\x4c\x5a\xa5\x71\xb9\xeb\xf9\x55\x02\x50\x31\x85\x65\x18\xe9\x47\xdd\xef\x45\x21\x5b\x51\xb9\xda\x28\x4b\xd4\x7a\xd2\x8b\x1f\x38\x97\x0f\xde\xaa\x34\xb2\x94\x7c\x82\xef\xf7\xd2\xf9\xd6\x45\xb4\x91\xca\x10\x45\xc5\x02\xc7\x5c\x17\x96\xa7\x42\x6d\x98\x70\x38\xd8\x63\xcc\x21\xbd\x9b\xef\x28\x9a\xaa\xdc\x3d\x45\x21\x63\xcf\x13\xad\xdc\x7d\xe4\x9d\xb6\x80\xe3\x25\xb4\x03\xeb\xc3\xb5\x36\x2b\xeb\xd9\xb3\x2a\x74\x8c\x36\xfd\x72\xb8\xe9\x63\xf0\x76\xfd\xba\xf1\x76\x7b\x7b\xf3\x06\xb8\xcf\x06\x38\x2e\x17\x2f\x83\x9b\x15\x3c\x02\x6c\x37\xaf\x1d\x6c\x6f\x68\x7b\x2e\xda\x9a\xb6\xe0\xac\x24\xec\xa9\x99\xe3\x30\xbc\x8a\x8c\x35\x53\x23\x48\x2c\x64\x07\x67\x91\x2f\x1f\xe3\x21\x08\x03\x14\x28\x1f\x8e\x92\x43\x5a\x6d\x04\x5d\xb1\x72\x22\x84\xb4\x69\x38\xf3\xcc\x64\x41\x0d\x3e\xd0\xcd\x73\x07\x38\xda\x34\x59\x2f\xfa\xdf\x4e\x68\xc7\x8e\x91\xb6\xcc\xee\xdb\x6e\x90\x1b\xce\x98\x43\xfa\xc1\x50\x51\x51\x55\x91\x0f\x2b\xca\x79\xea\xe8\x86\xa1\x0a\xe9\x9e\x52\xd2\x86\x96\xb6\x23\xe5\x70\xed\x26\x3e\xdf\x2f\x0a\x0c\x35\x8f\x9d\x59\x22\xe5\x66\x99\x39\x4e\xaf\x28\xd6\x64\x72\x48\x7f\xed\xc6\x3a\x80\x86\x9a\x65\x44\xd3\xa5\xa7\x2e\xa5\x36\x11\x2a\x6d\xd8\xcc\x1f\x7c\xf4\x10\xdb\x7a\x21\x26\x0c\xaa\x35\x0d\x6c\xde\xcc\xbb\x33\xaf\x50\xb6\x06\xa2\xc4\x56\xf8\x13\x6c\x88\x59\x2a\xd4\x4b\xc9\x2b\x4b\xec\x23\xd0\x41\xc1\x02\xb2\x94\xa2\x66\x8b\x56\xf9\x94\x84\x41\x89\x15\x63\x27\x9c\xb1\x26\x1b\x09\x7b\x9f\x2f\x2f\xe0\x97\xf7\x7f\xfc\xf6\x33\x5c\x5c\xba\xdf\xfe\x7d\x46\x58\x35\x6e\x26\xd1\xd7\x0d\xab\xb6\x97\x9e\x5f\x5f\x3e\xb2\xfa\x2f\x33\xf7\x1e\x9c\x0d\x28\x72\xe7\xa8\x95\x14\x06\x45\xe5\x9a\xf5\xae\xf3\x39\xa4\x3d\xcd\x92\x86\x69\x08\xc0\x71\xe6\x70\x7b\x7b\xf3\x12\x25\x23\x1d\x77\xf3\xe7\xaa\xe0\x72\x11\xba\x11\xf1\xe3\xc9\xac\x1c\xaa\xf4\xb2\xce\x7a\x45\x13\x19\xda\x6f\x46\x61\x72\x06\x0e\xdb\xdc\x87\xb7\x52\x02\x50\xd0\xf2\xde\x7a\x38\x5c\x68\x52\xf2\xe0\xb8\x7b\xde\x74\x32\x59\x27\x93\x59\x99\x3d\x85\x36\xb6\x44\xa3\x31\x4c\x0c\xaf\xb7\xf8\x2d\xf1\xf9\x5f\xce\x59\x81\xd9\xd2\x68\xd3\x35\x0c\x29\xef\x19\xba\x8d\x47\x45\x68\x5d\x33\xe1\xbb\x47\xfa\x13\xd3\xb4\xe0\x58\xed\xe4\x2f\xe2\xdc\xdd\x7c\xb2\x5b\x04\xfd\x42\xe1\xdf\x2d\x6a\x43\xc6\x75\x9c\xc3\xd5\xa0\xa1\x40\x12\xc6\x20\xd2\x9a\x5c\x1c\xb5\xe6\x6e\x53\xc3\x6a\x7b\x51\xec\x35\xb7\x1c\x52\xad\x79\x66\x39\xbc\xf1\x8a\x1a\x3a\x0e\x67\xb0\xeb\xd9\xf6\x4d\xcd\xaf\x77\xc6\x7c\xfd\xd7\x47\x60\xb8\xfc\x71\xa6\x0d\x0a\x54\x07\xf3\x77\xca\x44\x5a\x2f\x32\xae\x4d\x07\xf4\xc9\x82\x22\x93\x60\x7d\xa2\x74\x46\x75\xbe\x97\x9c\x03\x0d\xe3\xc0\x84\x3a\xc6\xc5\x99\x45\x53\x9f\x59\x38\xf5\x73\xe2\xd9\x31\x07\xb5\x11\xda\x09\x6a\xe3\x8c\x12\x60\x6f\x8b\x33\x8a\xff\xce\xe5\x75\xe2\xf0\xf7\xad\x51\xc9\xd6\x5e\x08\xee\x81\xfa\x74\x16\x4e\xd5\x50\xdc\xf3\xd8\xb7\xec\x96\x23\x31\x9b\x26\x7e\x2d\xfd\x48\xb5\x1d\xe1\xed\xaf\x11\x7e\x26\xde\x75\x27\x6b\x7b\xb1\x4b\x3a\x5c\x7a\x1f\x71\x3f\x4f\x5c\xce\xa7\xda\x5f\xef\xde\xc2\xe7\x07\x02\xfd\x3a\x50\xa0\xdf\x60\x70\xb2\xf8\xba\x6e\x7c\xf6\x28\x08\xee\x8c\xff\x03\x08\xb6\x49\x22\x5b\xd3\xb4\x06\xd2\xb2\x26\xb4\x69\xfa\x25\x88\x63\xf6\x4b\x90\x35\xe5\x6d\xb0\xae\x8a\x6c\x4d\xc6\xbb\xaa\x1d\xa5\xe1\x7f\xc7\x26\x54\x1e\xb1\x01\xfb\x37\x00\x00\xff\xff\x53\x95\xcd\x78\x5a\x1d\x00\x00")

func templatesCf_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_lbTf,
		"templates/cf_lb.tf",
	)
}

func templatesCf_lbTf() (*asset, error) {
	bytes, err := templatesCf_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_lb.tf", size: 7514, mode: os.FileMode(480), modTime: time.Unix(1529087538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConcourse_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcf\x6b\xdb\x30\x14\xbe\xfb\xaf\x78\x88\x9d\x0a\x31\x66\xcd\x21\x1b\x98\x31\x76\xda\x6d\xb0\xdd\xc6\x30\xb2\xac\xa6\xa2\xaa\x24\x9e\xa4\x74\x5b\xc9\xff\x3e\x64\xc7\xae\x63\xcb\xce\x8f\x42\xb7\xd0\xe5\xfc\xbd\x4f\xcf\xdf\x0f\x14\x21\xb7\xda\x23\xe3\x40\xe8\x6f\x8f\x1c\xef\x0b\xe3\x4b\x29\x58\x21\x0c\x01\xc2\xb4\x62\xda\xa3\xe5\x04\x1e\x13\x00\x45\xef\x39\x4c\xfd\x72\x20\x6f\x1e\x37\x14\x53\xae\x36\x85\xa8\xb6\x8b\x6e\x78\x21\x4b\x92\x00\x48\xcd\xa8\x13\x5a\xcd\x4f\x23\x5f\x0b\xad\xb6\x61\xa0\xdd\xad\x58\xa3\xf6\xa6\xd8\x3f\xbd\x37\x30\x46\xe5\x39\x10\x02\x1f\xa0\xfd\xa6\x7d\x4c\x5a\x6a\x7b\x9b\x5e\xa5\x01\xfa\x3d\xfb\x01\xef\x61\x82\xa7\xde\xa2\xd3\xa3\xa0\x55\x85\xdc\xda\x82\xca\xee\x53\x72\x20\xd6\x51\x27\x58\x40\xda\x3b\x3f\xa9\x4e\x40\x7e\x75\x54\x55\x14\x2b\x92\x24\x00\x8e\xae\x6d\x2d\x2a\x00\x57\x1b\x81\x5a\xdd\x73\xe5\x46\x2a\x06\xde\x6d\xb2\x4d\x92\xb1\x51\xb2\x3c\xce\xa1\x83\xc6\x44\x15\x7c\x29\x79\x63\xa9\x88\x85\x21\x26\xee\x50\xd3\x1b\xd4\xca\x71\x55\x05\xb3\x98\x56\x37\x62\xed\xb1\x21\x6f\x84\x8e\xe6\x77\x46\x9e\x96\x6f\x21\xcc\x62\x8f\x8f\xd4\x74\xe3\x64\x88\xaa\xa1\x1b\x75\x29\xed\x48\xd3\x43\xa6\x16\xe8\x25\xef\x3b\xbb\xb8\x75\xce\xd8\xb3\xfc\x6d\x26\xff\xbe\xc5\xb4\x2a\xa9\xa4\x8a\x71\x0c\x12\x75\x4b\x3f\x7d\xf4\x50\x9f\x39\x33\x07\xdb\x9f\x68\x9b\x41\xed\x34\xd3\x72\xba\xa6\xdf\x3e\x7d\x21\xfd\xf3\x8d\x46\x17\x03\x2e\x97\xd7\x09\x40\x49\xd9\xdd\x34\x6a\x07\xeb\xe1\xda\xa8\x18\xad\xe5\x28\x2f\xb2\x2c\x62\xb8\x71\x7a\x0c\xea\x92\xb7\x5a\x0e\xb3\xd0\x63\xab\x71\xe9\x20\x10\x0d\xc9\x54\xfc\xea\x91\xd7\x9e\xbf\x78\x4e\x9e\xc2\x11\x73\xbb\xb1\xfa\xa4\x56\x9f\x2d\xea\x25\x6a\x7a\x09\x9d\x5e\x65\xc7\x54\x7a\x95\xfd\x5b\x8d\x3e\xa7\xd0\xaf\x2a\x7a\xe7\xd5\x79\x95\xc5\x35\x55\xdc\x3d\x68\xbc\x2b\x2c\x67\x1e\x85\xfb\x75\x6a\xb7\x4f\x10\xda\xa0\xd0\xe1\x88\xf8\xf8\xdb\xec\x5d\x02\x50\x09\xe4\x6c\xe2\x8f\x75\x0e\xe4\xb3\x2a\xb5\x57\x55\x60\xa3\x8c\x71\x6b\x27\x97\xf9\x28\xa5\x7e\x38\xd4\xa7\x20\x1a\xab\x77\xdb\xb9\x13\xb4\x2b\x90\xaa\x35\xdf\x47\x5d\x05\x4c\xc5\xad\x13\xaa\xa9\xf8\x10\x98\x03\x59\x65\x3d\xa2\xae\x1f\xc8\x6f\xc4\xcf\x19\xa2\x21\xb0\xc5\xcc\xbd\x17\x5e\x2c\x9d\xa3\x70\x0c\x2b\x32\x99\xa2\xde\x61\x3b\xb6\x67\xa4\x6f\xe6\xbe\x3e\x32\x7e\xf6\x98\xfc\xad\x2e\x3b\x7f\xcb\xe5\xf5\xff\x00\x9e\x1a\xc0\x89\x2b\xed\xd9\x8f\xd1\x1d\xe9\xa2\x26\xbb\xc0\x4b\x66\x9b\x24\xda\x3b\xe3\x5d\x4f\x88\x20\x56\xe0\x6c\x04\xd9\x50\xe9\xf9\x0c\xcd\x93\xea\x51\x22\x61\x26\x69\xa2\x0f\xcd\xee\x5d\x5a\x73\xfe\x09\x00\x00\xff\xff\xac\xd9\xe5\xba\xea\x11\x00\x00")

func templatesConcourse_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesConcourse_lbTf,
		"templates/concourse_lb.tf",
	)
}

func templatesConcourse_lbTf() (*asset, error) {
	bytes, err := templatesConcourse_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/concourse_lb.tf", size: 4586, mode: os.FileMode(480), modTime: time.Unix(1529087538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetworkTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\xcd\x6a\xc3\x30\x10\x84\xef\x7a\x8a\x61\xe9\xa1\x2d\x89\x71\x6f\x25\x10\xfa\x20\x21\x08\xc5\xde\xa6\xa2\x89\x64\x56\x92\x5b\x1a\xfc\xee\xc5\xf9\x23\x76\x2c\x7a\xab\xaf\x9e\x9d\x19\x7d\xbb\xc2\xc1\x27\xa9\x18\x64\x7e\x92\xb0\xec\x75\x6b\x25\x26\xb3\xd3\x8e\xe3\x97\x97\x4f\x02\x6d\x7c\xf8\x20\x1c\x14\xe0\xcc\x9e\x31\xfa\x96\xa0\x87\x43\x6b\xa4\x60\xd7\x6a\x5b\x77\xf3\x5e\x3e\x6f\x1d\x29\xc0\xd4\xb5\x70\x08\x3a\x34\xa6\xe2\xab\x7e\x75\x1e\x38\x27\xe8\xca\xd6\xd2\xd1\x5a\x01\x3b\x5f\x99\x68\xbd\x9b\xf4\x17\xde\x5a\xef\xba\xde\xf7\xd2\x5a\x6f\xc5\xa7\x46\x1f\x6b\xdd\xe8\x26\x7e\x2e\x41\x84\x37\x5c\x1e\x39\xd4\x14\x7d\xe5\xe2\xb9\xe8\xa5\xab\x72\x8d\x05\x32\x3e\xc7\xf0\xca\x27\x17\x73\x10\x5a\xc7\x71\x18\xf9\x82\x05\x4a\x74\xa4\x3a\xa5\xd4\x3d\xee\x90\x36\x8e\xe3\x9f\x94\x33\x98\xc3\x00\x73\x23\xfc\x6e\xbf\x6f\x07\x7a\xb4\xa7\x84\xc7\x31\xf1\x19\x5e\x67\x28\x9f\xb2\x3c\xff\x0f\xe8\xe8\xe2\x46\xeb\xbc\x27\x9a\xb9\xd4\xe9\xd0\xeb\xf8\x69\x03\xbf\x01\x00\x00\xff\xff\x4e\x69\x5e\xfa\xf0\x02\x00\x00")

func templatesNetworkTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetworkTf,
		"templates/network.tf",
	)
}

func templatesNetworkTf() (*asset, error) {
	bytes, err := templatesNetworkTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network.tf", size: 752, mode: os.FileMode(480), modTime: time.Unix(1529087538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetwork_security_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\xc1\x8a\xdb\x30\x10\x86\xef\x7a\x8a\x41\xf4\x14\xd8\x90\x7a\xe3\x25\x14\x42\xe9\xb1\xf7\xde\x4a\x31\x8a\x34\xf5\x8a\x3a\x1a\x33\x92\xb3\x6d\x17\xbf\x7b\x51\xbc\x69\xb3\x89\x6d\x5c\xe3\x52\x02\xf6\xd5\xdf\xfc\x33\x1a\x7f\x32\xa3\xa7\x8a\x35\x82\x54\x3f\x2b\x46\xde\x67\x0e\xc3\x13\xf1\xb7\xcc\xa3\xae\xd8\x86\x1f\x59\xce\x54\x95\x12\xe4\x8e\xfc\xa3\x84\x67\x01\xe0\xd4\x1e\xe1\xe2\xd9\x82\x7c\xf3\x7c\x50\xbc\x44\x77\xc8\xac\xa9\xef\x8e\xb8\x00\x28\x48\xab\x60\xc9\xb5\xc2\x8c\xb9\x25\x57\x47\xee\x34\x49\xd3\x2f\x3b\xf6\x38\xe3\x5a\x5e\x6e\x41\x4a\x78\x0f\xa7\xc1\x5f\x33\xcb\xd8\x7f\xb9\x58\x46\xf4\xf3\xea\x0b\xbc\x83\x8e\x9c\x5a\x0a\x01\x10\x54\xee\x8f\x67\x03\x40\x77\xb0\x4c\x6e\x8f\x2e\x5c\x9d\x2a\x0e\x5a\x8b\x5a\x88\x01\x7b\xe3\xaa\x40\x09\xd2\xf7\x6d\xad\x73\x7b\xbe\x59\x5e\xc9\x96\x62\x58\x7b\x4d\xb2\x5a\x09\x00\x63\x19\xf5\xe5\x86\xff\xe4\x7e\x74\x3b\xaa\x9c\x89\x69\x4a\x6b\xf4\xbe\x73\x82\x0f\x45\x41\x4f\x4d\x57\x0a\xa4\xa9\xe8\xe0\x3e\xe9\x32\x52\x2f\x9b\x2c\x89\x43\xc6\xca\xe5\xf8\x9a\x5a\x44\xc6\xa0\x0f\xd6\x1d\xbf\xff\x15\xb8\x05\x99\x24\x67\x41\xca\x18\x46\xef\xb3\x92\xf1\xab\xfd\xde\x13\x74\x09\x9e\x98\x36\x49\x5a\x8c\xfb\x97\x26\x01\xb4\x5f\x9f\x33\x9d\xfb\xef\x59\xd3\xec\x25\xed\xaf\x3c\x8b\x85\x77\x2a\x47\x17\x46\xe8\x76\x56\x3c\xc0\xba\xb7\xb7\x6d\xdd\xc3\xe6\x61\x33\x7b\x37\xa9\x77\x8d\x0d\xc4\x63\xd5\xfb\x5d\x3f\xc0\xbe\xe4\xb6\xed\x4b\xd2\x34\x4d\x67\xfd\xa6\xd2\xcf\x38\x3f\x42\xba\x58\x35\x40\xb5\xfb\xff\xa1\xda\x62\x22\xd1\xd2\xfb\xd9\xb2\xa9\x2c\xd3\x8c\xe6\xb1\xda\x8d\x30\xed\x54\x39\xc0\xb6\xf5\x6d\xff\xd8\x36\x9b\xf5\x7a\x36\xae\xd7\xb8\x5f\x01\x00\x00\xff\xff\x40\x6d\xed\x7f\x6e\x0d\x00\x00")

func templatesNetwork_security_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetwork_security_groupTf,
		"templates/network_security_group.tf",
	)
}

func templatesNetwork_security_groupTf() (*asset, error) {
	bytes, err := templatesNetwork_security_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network_security_group.tf", size: 3438, mode: os.FileMode(480), modTime: time.Unix(1529087538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOutputTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\xe1\x6e\x9b\x30\x14\x85\xff\xf3\x14\x57\x68\x3f\xd6\x29\xa3\x5d\x24\xa6\x09\x29\xda\x83\x4c\xd3\x95\x03\xb7\x89\x57\xb0\xad\x6b\x9b\xb6\xab\xf2\xee\x13\x21\x30\x4c\xed\xaa\x4d\x7e\xfa\x1e\x7f\xe7\xf8\xd8\x41\x7b\x67\xbc\x83\xbc\x57\xe4\x50\x89\x8e\x72\x78\xc9\x00\x7a\xd1\x7a\x82\x1d\xe4\x9f\x5e\x7a\xc1\xc5\x3c\x85\xdd\x0e\xf2\x1c\x7e\x82\xf8\xeb\x99\xb8\xc3\x5e\xb2\xf3\xa2\x45\x45\xee\x51\xf3\x43\xb1\xd7\xf6\x58\x7c\x29\x06\xed\xaf\xbb\xdf\x50\x41\xb0\xfd\x94\x67\xa7\x2c\x9b\x3c\xad\xdf\xbf\xe9\xba\x98\xcf\xbe\xeb\xf5\x6a\x4e\x32\xae\x8e\x01\xce\xa3\xd0\x8c\xc9\x6a\xcf\x35\xe1\x81\xb5\x37\x69\xd3\x88\xee\xd5\xa1\x43\x4d\xfc\xcc\x11\x4e\x18\xe8\x5c\xca\x7b\x53\xa5\xc4\xab\x42\x9d\x66\x71\x20\x14\x75\xad\xbd\x4a\x34\x3b\xf7\x15\x8a\xff\x17\x17\x32\x1b\xba\x17\xbe\x75\x68\xa9\xf6\x2c\xdd\xf3\x68\x9e\xa4\x5e\xde\xc1\x4a\x9e\x82\xd3\x93\x23\x56\xa2\x45\x99\x26\x1a\xbf\x6f\x65\x8d\xf2\x02\x91\x06\x45\xd3\x30\x59\xbb\xca\x29\x99\x6a\xa7\x79\x9a\xae\x78\x47\xe7\x8c\xad\x6e\x6f\xdf\xc3\xad\xb6\x65\x59\x96\x01\xdd\xb0\xec\x85\x23\x7c\xa0\xe7\x25\x78\xf8\x9d\xc3\xba\xd6\xe2\x42\x73\x46\x62\xdf\xd9\x62\xb1\x88\x86\xba\x53\x9e\x01\x58\x52\x56\x3a\xd9\x0f\xc1\x1c\x7b\x0a\x8c\xc6\x54\x1f\xf7\x99\xf7\xa1\x36\xa4\xac\x3d\xbe\xb2\xba\x17\xad\x0d\xbc\xfe\xf8\xce\xec\xf5\x13\x7a\x6e\xaf\x68\xbf\xda\x6e\x83\x8a\xa6\x9b\xaf\x65\xc3\xd1\x37\xbc\x14\x24\xee\x2e\xf2\x60\x07\xdb\xaf\x23\x80\x54\x8f\xb2\x09\xb7\x4a\x75\x79\x41\x49\xdb\x40\x11\xfd\x00\x45\xb7\x0e\x8b\xe3\xfc\xf3\x3a\xfc\x06\x7e\x6c\xe0\xee\x26\x11\xe4\xf0\x18\x65\x1d\xb5\x1d\x49\x41\x9e\x0d\x7c\x5b\x71\xa6\x4b\xc1\x59\x17\xf9\x6f\xbc\x05\x2c\x6f\x12\xe5\x5e\x4d\xfc\x3e\x12\xff\x05\x00\x00\xff\xff\x5b\x37\x9d\xc1\x2b\x06\x00\x00")

func templatesOutputTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesOutputTf,
		"templates/output.tf",
	)
}

func templatesOutputTf() (*asset, error) {
	bytes, err := templatesOutputTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/output.tf", size: 1579, mode: os.FileMode(480), modTime: time.Unix(1529087538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResource_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x41\x6b\xc3\x30\x0c\x85\xef\xfe\x15\x0f\xb3\xd3\x60\xa1\xbb\x16\xc2\x7e\xc8\x18\xc6\x75\x44\x66\x48\xa4\x22\xdb\x39\xac\xf8\xbf\x0f\x07\xb6\xb5\x34\xd9\x60\x3a\xda\x7a\xd2\xfb\x9e\x94\x92\x14\x0d\x04\xeb\x3f\x8a\x92\xce\xee\xeb\xc5\x8d\x2a\xe5\x6c\x61\x4f\x92\xde\x2d\x2e\x06\x60\x3f\x13\x5a\xf5\xb0\x0f\x97\xc5\x6b\x47\xbc\xb8\x38\xd4\xa7\xb5\xc7\x00\x93\x04\x9f\xa3\xf0\x4f\x87\xd2\x18\x85\x6b\xfb\x0c\x52\x38\xdf\xc8\x6f\x77\xb9\x75\x7e\xdf\xc3\x5a\xbc\xe0\x19\x47\x1c\x50\xad\x31\x40\xf6\x63\x5a\x1d\x00\xc4\x4b\x54\xe1\x99\x38\xdf\xd9\x68\x4b\xaa\xa9\xc6\xdc\x53\x9d\xcb\x69\x8a\xc1\xc5\x1d\xa0\xad\xfa\x1b\xf2\x57\xd5\x15\xf8\x16\xe6\x96\x60\x3f\x8c\xed\xe3\x74\xcd\x51\xf7\xd8\xb5\xd6\xd7\xc3\x1b\x8e\xd8\x99\xb3\xba\xf8\x8e\xc0\xf9\x61\x50\x4a\xc9\xf9\xe9\xfa\x5e\x29\xfb\x1c\xc3\x7f\xf2\xfe\x0c\x00\x00\xff\xff\x7b\x97\xd8\x1d\x45\x02\x00\x00")

func templatesResource_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResource_groupTf,
		"templates/resource_group.tf",
	)
}

func templatesResource_groupTf() (*asset, error) {
	bytes, err := templatesResource_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resource_group.tf", size: 581, mode: os.FileMode(480), modTime: time.Unix(1529087538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStorageTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x92\x3f\x6b\xc3\x30\x10\xc5\x77\x7f\x8a\x43\x64\xea\x60\x3a\x74\x2a\x98\x8e\xdd\x9b\x31\x04\xa1\xc8\x17\x45\x20\x9f\xc4\x49\x36\xa4\xc1\xdf\xbd\x48\x71\x9c\x3f\x34\x4d\xa7\x0e\xcd\x16\xeb\xe9\xf7\xde\xbd\x13\x63\xf4\x3d\x6b\x04\xc1\x8a\x5a\xdf\xc9\x98\xd8\x92\x11\x20\x94\xd6\xbe\xa7\x24\xe0\x50\x01\x38\x24\x93\x76\x00\x0d\xbc\x54\x00\x7d\x08\xc8\x90\xff\x6d\x95\x8b\x58\x01\xc4\x80\xda\x2a\x37\x7f\x19\xab\xea\x4c\x56\x9f\x3d\x23\x67\xb4\x67\x65\x50\xce\x64\xb1\xf1\x71\x77\x34\x20\xd5\x21\xdc\xfc\x1a\x10\x8b\xc3\xa0\xb8\x8e\xb6\x0b\x0e\x25\xd2\x20\x6d\x3b\x2e\x0e\x57\x51\xeb\x09\x57\x33\xc6\xde\xa5\x51\x54\x00\x27\x6f\x69\xd8\xf7\x41\x16\xf8\x4c\xfb\xf6\xb0\x01\x21\xe0\x0d\x4e\x51\xaf\x35\x75\xce\x59\x3f\xd5\x59\xba\x7a\x5e\xc3\x2b\xdc\xe1\x8c\xa2\xca\x65\x79\xad\x92\xf5\x74\x3b\xcf\x65\x04\x63\x3d\x95\xa8\x53\x7a\x99\x6c\xa9\xf4\x4a\xbc\x4c\x8a\x5a\xc5\xed\xa5\x8e\x31\x38\x7b\xe4\xcb\xb4\x0f\x65\xae\xf7\x8f\x65\x31\x4e\xca\xc4\xd2\x26\x00\xd2\x60\xd9\x53\x87\x94\xce\xb6\x53\x81\x19\x37\x96\xa0\x76\x8b\x7a\xaf\x1d\x4e\x97\xac\x21\xcf\x28\xf5\x4e\x91\xc1\x08\x0d\xac\x44\x9e\x4a\xac\xcb\x85\x1f\x77\xaa\x3d\x25\x65\x09\xf9\xe1\x56\xcb\x64\x45\x72\x67\x51\xf0\x57\xab\x02\xb8\x79\x91\x93\x7f\xb1\xbf\xf3\x68\x8f\xfc\x19\x30\x8f\x9d\xcf\x31\xc6\x79\x25\x81\xed\xa0\x12\x8a\xdf\xb7\x16\x13\x76\x1a\x9d\x7b\xd0\xdc\x2c\xfb\xcf\xed\x6d\x9c\xdf\xe4\xea\xbe\x02\x00\x00\xff\xff\xc2\xf6\xd8\x08\x9e\x04\x00\x00")

func templatesStorageTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesStorageTf,
		"templates/storage.tf",
	)
}

func templatesStorageTf() (*asset, error) {
	bytes, err := templatesStorageTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/storage.tf", size: 1182, mode: os.FileMode(480), modTime: time.Unix(1529087538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTlsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x02\x31\x0c\x05\xd0\x7d\x4e\xf1\xc9\x09\x5c\x88\xe0\xa2\x0b\xaf\xa0\x07\x08\xad\x04\x5b\x6c\xa9\x24\xb1\x30\x0c\x73\xf7\x79\xa6\x3e\xff\xf6\x56\x70\x74\x97\x9f\xb5\x95\x43\xe5\xab\x1b\x83\xcb\xf4\x2a\x6b\x38\x63\x27\x20\xf7\xcf\xb4\x16\x75\x20\x81\x9f\xaf\x07\x13\x60\x9e\xa5\xb4\x70\x20\xe1\x7a\xb9\xdf\xe8\xa0\x33\x00\x00\xff\xff\x52\x4d\xac\xad\x51\x00\x00\x00")

func templatesTlsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesTlsTf,
		"templates/tls.tf",
	)
}

func templatesTlsTf() (*asset, error) {
	bytes, err := templatesTlsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tls.tf", size: 81, mode: os.FileMode(480), modTime: time.Unix(1528228376, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xc1\x4a\xc4\x30\x10\x86\xef\x79\x8a\x21\x78\x5e\xdd\x8b\x37\x9f\x25\xa4\xe9\xb8\x0c\xa6\x93\x32\x99\x44\xb0\xf4\xdd\x65\xb7\x10\x35\x5b\xa4\x6c\x7b\xcb\xf7\x7d\x30\xf0\x57\x2f\xe4\x87\x88\x60\x91\xab\xa3\xd1\xc2\xb2\x1a\xf3\xf3\x2a\x78\xa1\xc4\xfd\x6b\xa6\x69\x8e\xe8\xf6\x93\x5c\x86\x1c\x84\x66\xa5\xc4\x3b\x58\x91\x3d\xeb\x0e\x08\x91\xf0\x3f\x90\x31\x08\xea\xfd\x81\x39\x15\x09\xe8\x2e\x92\xca\xec\xd8\x4f\x68\x61\x31\x00\x23\xbe\xfb\x12\x15\xde\xc0\x5a\xf3\x27\xa9\x8c\xea\x1e\xed\x8e\x88\xb9\x0c\x47\x55\x46\xfd\x4c\xf2\xe1\x02\x8d\x72\xe7\x9e\x5f\x4e\xb7\xff\xf9\xfc\xda\x65\xc4\x8a\xc2\x3e\x1e\xeb\x66\x49\x95\x46\x14\xb0\xfe\xab\x08\xca\xb4\x15\xdd\x50\xd7\xf2\x69\xa9\x5e\x4e\x1d\x58\xad\x01\x68\xb3\xc1\xf6\x35\xb9\x81\x9b\xd6\x46\xec\xb5\x06\x7e\x6b\xdb\xa4\x3b\xda\x06\xd6\xeb\xf5\xdf\x01\x00\x00\xff\xff\x3c\x17\x6b\x7b\xa2\x02\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 674, mode: os.FileMode(480), modTime: time.Unix(1529087538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cf_dns.tf": templatesCf_dnsTf,
	"templates/cf_lb.tf": templatesCf_lbTf,
	"templates/concourse_lb.tf": templatesConcourse_lbTf,
	"templates/network.tf": templatesNetworkTf,
	"templates/network_security_group.tf": templatesNetwork_security_groupTf,
	"templates/output.tf": templatesOutputTf,
	"templates/resource_group.tf": templatesResource_groupTf,
	"templates/storage.tf": templatesStorageTf,
	"templates/tls.tf": templatesTlsTf,
	"templates/vars.tf": templatesVarsTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cf_dns.tf": &bintree{templatesCf_dnsTf, map[string]*bintree{}},
		"cf_lb.tf": &bintree{templatesCf_lbTf, map[string]*bintree{}},
		"concourse_lb.tf": &bintree{templatesConcourse_lbTf, map[string]*bintree{}},
		"network.tf": &bintree{templatesNetworkTf, map[string]*bintree{}},
		"network_security_group.tf": &bintree{templatesNetwork_security_groupTf, map[string]*bintree{}},
		"output.tf": &bintree{templatesOutputTf, map[string]*bintree{}},
		"resource_group.tf": &bintree{templatesResource_groupTf, map[string]*bintree{}},
		"storage.tf": &bintree{templatesStorageTf, map[string]*bintree{}},
		"tls.tf": &bintree{templatesTlsTf, map[string]*bintree{}},
		"vars.tf": &bintree{templatesVarsTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

