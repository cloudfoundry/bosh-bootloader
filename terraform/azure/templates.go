// Code generated by go-bindata.
// sources:
// templates/cf_dns.tf
// templates/cf_lb.tf
// templates/concourse_lb.tf
// templates/network.tf
// templates/network_security_group.tf
// templates/output.tf
// templates/resource_group.tf
// templates/storage.tf
// templates/tls.tf
// templates/vars.tf
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCf_dnsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x93\xc1\x4a\x03\x31\x10\x86\xef\xfb\x14\x43\xe8\x41\x8b\x0d\x05\x6f\x42\xf1\x41\x8a\x84\x69\x32\xad\x91\xdd\x49\x48\xb2\x95\xb6\xec\xbb\x4b\x22\xad\x35\x6b\xab\x37\x05\xf7\x9a\x7f\x26\x5f\xbe\xd9\x31\x98\x10\x04\xee\xfb\x40\xa1\x53\xbe\x5f\xb5\x56\x2b\xeb\x05\x08\xbd\x9e\xb5\x2b\x01\x87\x06\x80\xb1\x23\xa8\xbe\x05\x88\xc9\x61\x8b\x41\x12\x6f\x95\x35\xc3\xac\xe4\x67\xd6\x8b\x06\x20\x50\x74\x7d\xd0\xa4\x36\xc1\xf5\x5e\x95\xfa\x53\xc1\x97\x87\x0b\x10\x02\x1e\xe1\xc5\x59\xbe\x11\xe2\x0e\x8e\x44\x9f\xc3\x72\xe5\xe2\xb3\x9c\xca\x5c\x73\x0b\x0f\x70\xa1\xdd\x90\x19\x0c\x79\x62\x13\x95\xe3\x73\xe8\xe5\xe9\xad\xe8\x7d\x6b\x35\x26\xeb\x58\x6d\x30\xd1\x2b\xee\xa4\x5e\x8b\xa7\x66\x68\x9a\x63\xcf\x0f\x33\x86\xa3\xda\x3b\xa6\x22\xe6\x07\x56\xe2\x2e\x26\xea\x94\x71\x1d\x5a\x1e\xfe\x86\x93\x06\x20\xe1\x26\x16\x78\x00\xe2\xad\x0d\x8e\x3b\xe2\x34\x1a\x66\xe6\x1d\x2e\x8b\x40\x15\x48\xbb\x60\xbe\x97\x31\xcd\x9d\xb2\x37\x55\x05\xca\x8d\xb5\x5c\xa9\xd7\xf2\x34\xbf\xdf\xf7\x05\x90\x52\x5b\x3f\x2a\x33\xdc\xcf\xe7\xef\x84\x59\x42\xac\x4e\x97\x62\x72\xc8\x5b\x25\x47\x4b\x25\xcb\x8a\x48\xeb\x15\x1a\x13\x28\xc6\xe1\xda\xdf\x76\x26\x39\x13\x5f\xd5\x5c\x02\xff\xd2\xf4\x58\x72\xb9\xb4\x76\xfc\x16\x00\x00\xff\xff\xbb\x66\x80\x33\xe7\x04\x00\x00")

func templatesCf_dnsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_dnsTf,
		"templates/cf_dns.tf",
	)
}

func templatesCf_dnsTf() (*asset, error) {
	bytes, err := templatesCf_dnsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_dns.tf", size: 1255, mode: os.FileMode(480), modTime: time.Unix(1529087566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4b\x6f\xe3\x36\x10\xbe\xeb\x57\x0c\x84\x1e\x76\x83\xc8\x79\xa2\x08\x0a\x08\x45\x8b\xb6\xe8\x1e\x7a\xda\x1e\x7a\x23\x28\x69\x64\xb3\xa1\x49\x95\xa4\x9c\x75\x17\xfe\xef\x05\x49\x49\xb1\x68\xca\x71\x82\x3a\x75\x8a\xe4\x66\xcd\x83\xc3\x99\x6f\x1e\x9c\xac\xa8\x62\xb4\xe0\x08\xa9\x5e\x6b\x83\x4b\x52\xc9\x25\x65\x22\x85\xaf\x9b\x24\x79\x24\x36\xf5\x17\x52\xa2\x32\xa4\xa0\x1a\xbf\xbd\x8d\x91\x1b\xaa\xf5\x83\x54\x95\xa7\x29\xd4\xb2\x55\x25\x42\x4a\xff\x6e\x15\xaa\x25\xd1\x6d\x21\xd0\xa4\x90\x96\x75\xa6\xed\x01\x09\x80\xa0\x4b\x84\xf0\x2f\x87\xf4\x9b\xaf\x2b\xaa\x66\x28\x56\x84\x55\x9b\xcc\x0b\x24\x00\xb4\xaa\x14\x6a\x4d\x1a\x85\x35\xfb\xb2\xcd\x5e\xb2\x4a\xf9\x03\x3e\x58\x49\x81\xe6\x41\xaa\x7b\x62\x3f\x9f\xc3\xdd\x39\x5c\x7d\xdc\x58\x05\xbd\x55\x64\xae\x64\xdb\x10\x7f\xfc\x70\x5e\x8c\x9a\xe7\x90\xa6\xf0\x3d\xfc\x29\x99\xf8\x90\xa6\xe7\xd0\x5f\x67\xcc\x3c\x2b\xa4\x5e\xcc\xce\x66\x56\xe6\x23\x7c\x07\x13\xea\x9c\x11\x2b\xa6\x4c\x4b\x39\xe9\x8d\xf4\xe7\xf4\x46\xac\x04\x9a\x27\x8e\x0e\x14\xc4\xce\x1e\xb4\x6c\xd2\x24\x1a\x8d\xfe\x70\x8d\x65\xab\x98\x59\x7b\x23\x5d\x74\xa6\x43\x13\x89\x8c\xbd\x10\x97\x25\x35\x4c\x8a\x28\xab\xc2\x39\x93\x62\xd2\xfb\xaf\xeb\xfc\x04\xc0\xd0\xb9\x76\x17\x04\x40\xb1\x62\x4a\x8a\x25\x0a\xb3\x73\x35\x6b\xef\xe6\x40\xd7\xa9\x96\xa3\xc7\xf5\xc2\x98\x66\x0f\xb2\xf7\x00\xdc\x49\x26\x00\x8d\x62\xd2\x2a\x8d\xcb\x5d\x5f\x5e\x25\x00\x15\x53\x58\x86\x0e\x7f\xd4\xfd\x49\x14\xb2\x15\x95\x4b\x98\xb2\x44\xad\x27\xad\xf8\x81\x73\xf9\xe0\x4f\x95\x46\x96\x92\x4f\xf0\xfd\x5e\x3a\xdb\x3a\x8f\x36\x52\x19\xa2\xa8\x98\xe3\x98\xeb\xcc\xf2\x54\xa8\x0d\x13\x0e\x0e\x3b\x8c\x39\xa4\x77\x97\x5b\x8a\xa6\xd2\x79\x47\x51\xc8\xd8\xf3\x44\xd3\x79\x17\x80\xaf\x92\xd5\xf1\x84\xda\x02\xf9\xfe\xcc\x9b\x95\xf5\xec\x59\xf9\x3a\x06\x9d\x7e\x39\xea\xf4\x21\xb0\xbb\x7e\xdb\xb0\xbb\xbd\xbd\x79\xc7\xdd\xbf\x8d\x3b\x2e\xe7\x2f\x43\x9d\x15\x3c\x00\x73\x37\x6f\x1d\x73\xef\xa0\x7b\x21\xe8\x9a\xb6\xe0\xac\x24\xec\xa9\x79\x64\x3f\xca\x8a\x8c\x35\x53\xe3\x49\xcc\x73\x7b\xe7\x94\xff\xcc\xd5\x83\x2f\x06\x60\x50\x3e\xdc\x28\x87\xb4\x5a\x0b\xba\x64\xe5\x84\x27\x69\xd3\x70\xe6\x99\xc9\x9c\x1a\x7c\xa0\xeb\xe7\xce\x78\xb4\x69\xb2\x5e\xf4\x24\x86\xb8\x43\x07\x4e\x9b\x7b\xf7\x6d\x37\xeb\x0d\x57\xcd\x21\xfd\x6c\xa8\xa8\xa8\xaa\xc8\xe7\x25\xe5\x3c\x75\x74\xc3\x50\x85\x74\x4f\x29\x69\x43\x4b\x5b\xa6\x72\xb8\x76\x43\xa1\x2f\x22\x05\x86\x9a\xc7\xc6\x2c\x90\x72\xb3\xc8\x1c\xa7\x57\x14\xab\x3c\x39\xa4\xbf\x76\x93\x1f\x40\x43\xcd\x22\xa2\xe9\xc2\x53\x17\x52\x9b\x08\x95\x36\x6c\xe6\x2f\x3e\x7a\xc0\x6d\xbc\x10\x13\x06\xd5\x8a\x06\x67\xde\x5c\x76\x77\x5e\xa2\x6c\x0d\x44\x89\xad\xf0\x37\x58\x13\xb3\x50\xa8\x17\x92\x57\x96\xd8\x7b\xa0\x43\x84\xc5\x65\x29\x45\xcd\xe6\xad\xf2\x21\x09\x9d\x12\x4b\xcd\x4e\x38\x63\x4d\x36\x12\xf6\x36\x5f\x9c\xc1\x2f\x9f\xfe\xf8\xed\x67\x38\xbb\x70\xbf\xfd\xbb\x8e\xb0\x6a\x5c\x5a\xa2\xaf\x20\x56\x6d\x2e\x3c\xbf\xbe\x78\x64\xf5\x5f\x66\xee\x1d\x39\x1b\x50\xe4\xee\x51\x2b\x29\x0c\x8a\xca\x55\xf0\x6d\xe3\x73\x48\x7b\x9a\x25\x0d\x93\x12\x80\xe3\xcc\xe1\xf6\xf6\xe6\x25\x4a\x46\x3a\xee\x2e\x9f\xab\x82\xcb\x79\x68\x46\xc4\x8e\x27\xa3\xb2\x2f\xe1\xcb\x3a\xeb\x15\x4d\x44\x68\xb7\x26\x85\xc1\x19\x38\x6c\xa9\x1f\x9e\x53\x09\x40\x41\xcb\x7b\x6b\xe1\xd0\xe5\xa4\xe4\xc1\x75\x77\xac\xe9\x64\xb2\x4e\x26\xb3\x32\x3b\x0a\xad\x6f\x89\x46\x63\x98\x18\x1e\x78\xf1\x9e\x71\xb4\xa7\x76\x56\x60\xb6\x30\xda\x74\x75\x43\xca\x7b\x86\x6e\x61\x52\x11\x5a\xd7\x4c\xf8\x22\x92\xfe\xc4\x34\x2d\x38\x56\x5b\x61\x8c\xd8\x78\x77\x39\x59\x34\x82\xb2\xa1\xf0\xaf\x16\xb5\x21\xe3\x74\xce\xe1\x6a\xd0\x50\x20\x09\x5d\x11\xa9\x50\xce\x9d\x5a\x73\xb7\xe8\x61\xb5\x6d\x1b\x3b\x35\x2e\x87\x54\x6b\x9e\x59\x0e\x7f\x78\x45\x0d\x1d\x7b\x35\x58\x15\x6d\xfa\xda\xe6\xb7\x43\x63\xbe\xfe\xeb\x23\x3e\x5c\x18\x39\xd3\x06\x05\xaa\xbd\x61\x7c\x85\x78\x5a\x63\x32\xae\x4d\x07\xfb\xc9\xf4\x22\x93\xd0\x7d\x22\x91\x46\x59\xbf\x13\xa3\x3d\xe5\x63\xcf\x10\x3b\x86\xc7\x69\x3a\x55\x9f\x98\x57\xf5\x73\xdc\xda\x31\x07\x99\x12\x9e\x13\x64\xca\xe9\xc5\xc1\x76\x92\x13\x0a\xc3\x56\x63\x3b\x72\x14\xfa\x7a\xa9\x64\x6b\x9b\x85\x7b\xd1\x3e\x1d\x8c\x23\x57\x19\xf7\xac\xf6\xe5\xbc\xe5\x48\xcc\xba\x89\x77\xae\x1f\xa9\xb6\xc3\xbe\xfd\x35\x42\xd3\xc4\x7b\xf0\xd8\x25\x31\xd6\xce\xc3\xb5\xfa\x01\x9d\x7c\xa2\x8d\x1f\x79\x35\xbe\xdd\xaf\x4f\x16\x19\xfa\x4d\x41\x43\xbf\x63\xe3\x95\xb0\xe1\xca\xf7\x5b\x81\x46\xd0\x6b\xfe\x47\xc8\xd8\x24\x89\x6c\x4d\xd3\x1a\x48\xcb\x9a\xd0\xa6\xe9\xd7\x2c\x8e\xd9\xaf\x59\x56\x94\xb7\xc1\x5e\x2c\xb2\x97\x19\x2f\xc5\xb6\x94\x86\xff\xa2\x9b\x50\x79\xc0\xaa\xed\x9f\x00\x00\x00\xff\xff\x44\x78\x23\x24\xed\x1d\x00\x00")

func templatesCf_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_lbTf,
		"templates/cf_lb.tf",
	)
}

func templatesCf_lbTf() (*asset, error) {
	bytes, err := templatesCf_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_lb.tf", size: 7661, mode: os.FileMode(480), modTime: time.Unix(1529087566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConcourse_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcf\x6b\xdb\x30\x14\xbe\xfb\xaf\x78\x88\x1d\xb6\xb2\x98\xb0\xe6\x90\x0d\xc2\x18\x3b\xed\x36\xd8\xee\x46\x96\xd5\x54\xab\xaa\x67\x9e\xa4\x74\x5b\xc9\xff\x3e\x64\x27\x8e\x63\xcb\xce\x8f\x42\x69\x58\x73\xfe\xde\xa7\xa7\xef\x07\x8e\x48\x5a\xf4\x24\x24\x30\xfe\xd7\x93\xa4\xfb\xac\xf4\xb9\x56\x22\x53\x25\x03\x26\xd0\x08\xf4\x64\x25\x83\xc7\x04\xc0\xf0\x7b\x09\x43\xbf\x05\xb0\x37\x8f\x2b\x4e\xa9\x34\xab\x4c\x15\xeb\x49\x33\x3c\xd1\x39\x4b\x00\x34\x0a\xee\x14\x9a\xf1\x69\x92\x4b\x85\x66\x1d\x06\xb6\xbb\x65\x4b\x42\x5f\x66\xfb\xa7\xb7\x06\xfa\xa8\xc5\x02\x18\x83\xcf\xf0\x0b\x95\x79\xcb\xd8\x7b\xd8\x5e\x6e\x1f\x9c\xe6\x68\x6f\xd3\xab\x34\xcc\xbc\x83\x4f\x30\x40\x57\x2d\xd3\xc8\x92\xf1\xa2\x20\x69\x6d\xc6\x75\x73\xa3\x05\x30\xeb\xb8\x53\x22\x20\xed\x9d\x1f\x14\x29\x20\x7f\x38\x6e\x0a\x4e\x05\x4b\x12\x00\xc7\x97\xb6\xd2\x16\x40\x9a\x95\x22\x34\xf7\xd2\xb8\x9e\x98\x81\x77\x9d\xac\x93\xa4\xef\x97\xce\x8f\x33\xea\xa0\x3f\x51\x21\x9f\x59\xe5\x58\x46\x62\xd1\x88\x69\xdc\x95\xf6\x86\xd0\x38\x69\x8a\xe0\x99\x40\x73\xa3\x96\x9e\x6a\xf2\x5a\xef\x68\x9a\x47\x54\xda\xf2\x4d\x54\x39\xd9\xe3\x63\x15\x5d\x3f\x20\xaa\xa8\xe9\x7a\xcd\x4a\x1b\xd2\xf4\x90\xb7\x19\x79\x2d\xdb\x06\x4f\x6e\x9d\x2b\xed\x59\x36\xd7\x93\x2f\xc6\x69\x5e\xe4\x5c\x73\x23\x24\x05\xa5\x9a\xdd\x77\x77\xef\xca\x34\xe6\x69\xe7\x12\x27\xba\x57\x12\x3a\x14\xa8\x87\x4b\xfb\xf3\xeb\x77\xd6\x3e\xbf\x44\x72\x31\xe0\x6c\x76\x9d\x00\xe4\x5c\xdc\x0d\xa3\x36\xb0\x16\x6e\x9b\x98\x12\x51\xf7\x62\xa3\xf3\x2c\x86\xeb\x87\xa8\x24\xcc\xe5\x56\xcb\x6e\x24\x5a\x6c\x15\x2e\xed\xe4\xa2\x26\x19\x4a\x61\x35\xf2\x1a\xc3\x9d\xd0\xbd\xb8\xec\x32\x12\x33\xbd\x76\xfc\xa4\x8e\x9f\xad\xed\x05\x4b\x7b\x09\x0d\x9f\x4f\x8f\x29\xf8\x7c\xfa\xb2\xfa\x7d\x4e\xbd\xff\xc7\x04\x9e\x57\xee\xf9\x34\x2e\xad\x91\xee\x01\xe9\x2e\xb3\x52\x78\x52\xee\xcf\xa9\x4d\x3f\x41\xef\x92\x14\x86\x23\xe2\xe3\x1f\xa6\x1f\x13\x80\x42\x91\x14\x03\x7f\xc1\x17\xc0\xbe\x99\x1c\xbd\x29\x02\x1b\x17\x42\x5a\x3b\xb8\xcc\x17\xad\xf1\xe1\x50\xad\x82\x68\xa2\xda\x6d\xe3\x4e\xd0\x2e\x23\x6e\x96\x72\x1f\x75\x15\x30\x85\xb4\x4e\x99\xba\xe9\x5d\xe0\x02\xd8\x7c\xda\x22\x6a\x6a\x42\xf2\x46\xfd\x1e\x21\xea\x02\xb7\x98\xb1\x97\xc5\x73\x87\xb4\x97\x91\x6e\x61\x06\xc3\xd4\x3a\x6a\xc3\xf6\x84\x10\x8e\x7c\xcb\x8f\x4c\xa1\x3d\x26\x86\xf3\xcb\x8e\xe1\x6c\x76\xfd\x9a\xc3\x33\x73\x38\xf0\x9d\x7b\xf2\xeb\x75\x43\x3a\xa9\xc8\x2e\xf7\xcb\xb3\x4e\x12\xf4\xae\xf4\xae\xa5\x47\xd0\x2c\x70\xd6\xba\xac\xb8\xf6\x72\x84\x66\x27\x7e\x94\x48\x95\x83\x34\xd1\x97\x69\xf3\x90\xad\x38\xff\x05\x00\x00\xff\xff\xad\x2e\x51\x41\x29\x12\x00\x00")

func templatesConcourse_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesConcourse_lbTf,
		"templates/concourse_lb.tf",
	)
}

func templatesConcourse_lbTf() (*asset, error) {
	bytes, err := templatesConcourse_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/concourse_lb.tf", size: 4649, mode: os.FileMode(480), modTime: time.Unix(1529087566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetworkTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\xcd\x4e\xc3\x30\x10\x84\xef\x7e\x8a\xd1\x8a\x43\x8b\xda\xa8\xdc\x50\xa5\x8a\x07\x41\xc8\x72\x93\xa5\x18\x5a\xbb\x5a\xdb\x01\x51\xe5\xdd\x51\xfa\x47\xf3\x63\x71\xc3\x57\xcf\xce\x8c\xbf\xb5\x70\xf0\x49\x4a\x06\x99\xef\x24\x2c\x3b\x5d\x5b\x89\xc9\x6c\xb5\xe3\xf8\xe9\xe5\x83\x40\x6b\x1f\xde\x08\x07\x05\x38\xb3\x63\xf4\xce\x0a\x74\x77\xa8\x8d\x14\xec\x6a\x6d\xab\x66\xde\xca\xe7\xb5\x23\x05\x98\xaa\x12\x0e\x41\x87\xbd\x29\xf9\xaa\x7f\x3e\x0f\x9c\x13\x74\x69\x2b\x69\xe8\x45\x01\x5b\x5f\x9a\x68\xbd\x1b\xf5\x17\xde\x58\xef\x9a\xd6\xf7\xd2\x5a\x6f\xc4\xa7\xbd\x3e\xd6\xba\xd1\x8d\x5c\xae\x40\x84\x27\xbc\x7b\xeb\x26\x44\x33\x5c\x5e\xdb\x15\x17\x6d\xf7\xe2\xbe\x68\x67\xa6\x58\x22\x63\x77\xec\x50\xfa\xe4\x62\x8e\x45\xed\x38\x76\x93\x1f\xb0\xc4\x02\x0d\xa9\x46\x29\x35\xa4\x1e\xd2\xda\x71\xfc\x13\x76\x86\x76\xe8\xd0\xde\x0b\xbf\xda\xaf\xdb\x81\x96\xf0\x29\x61\xd2\x07\x3f\xc3\xe3\x0c\x8b\x69\x16\xeb\xbf\x73\xed\xfd\xbf\xde\x72\x87\x60\x07\xd1\x3d\x83\xb1\xec\xab\x4b\x76\x93\xbf\x89\x27\x6e\xf9\x65\xfe\x04\x00\x00\xff\xff\xa6\x11\x1b\x18\x42\x03\x00\x00")

func templatesNetworkTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetworkTf,
		"templates/network.tf",
	)
}

func templatesNetworkTf() (*asset, error) {
	bytes, err := templatesNetworkTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network.tf", size: 834, mode: os.FileMode(480), modTime: time.Unix(1529087566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetwork_security_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd4\x51\x6f\xd3\x30\x10\x07\xf0\x77\x7f\x8a\x93\xc5\x03\x54\xac\x1a\x59\x33\x55\x48\x15\xe2\x91\x77\xde\x23\xd7\x3e\x32\x43\xea\x8b\xce\x4e\x07\x4c\xf9\xee\xc8\xcd\x02\x59\x97\x54\x21\x2a\x4c\x95\xd2\xd7\xfe\xef\x7c\x3e\xfd\x1c\x46\x4f\x15\x6b\x04\xa9\x7e\x56\x8c\xbc\xcb\x1c\x86\x7b\xe2\x6f\x99\x47\x5d\xb1\x0d\x3f\xb2\x9c\xa9\x2a\x25\xc8\x2d\xf9\x3b\x09\x0f\x02\xc0\xa9\x1d\xc2\xd1\x6f\x03\xf2\xd5\xc3\x5e\xf1\x12\xdd\x3e\xb3\xa6\xbe\x3a\xc4\x05\x40\x41\x5a\x05\x4b\xae\x37\xcc\x98\x5b\x72\x75\xcc\xb5\x93\x34\xe7\x65\x87\x33\x3a\xb9\x9e\x3f\x37\x20\x25\x7c\x80\xaf\x64\xdd\x6b\x29\xdf\x42\x7b\x83\xa7\xe1\x65\x1c\x64\xb9\x58\xc6\x9a\x37\xf0\x1e\x06\xda\xd5\x52\x08\x80\xa0\x72\x7f\xb8\x22\x00\xba\xbd\x65\x72\x3b\x74\xe1\xd9\xe5\xe2\xbc\xb5\xa8\x85\x18\xb1\x3e\xae\x0a\x94\x20\xfd\xa9\xe5\x0d\x2e\xd1\x37\x3b\x2c\xd9\x52\x6c\xd6\x5f\x93\x5c\x5f\x0b\x00\x63\x19\xf5\xf1\xa2\xff\xf4\xfd\xe4\xb6\x54\x39\x13\xbb\x29\xad\xd1\xfb\xc1\x09\x3e\x16\x05\xdd\x37\xa7\x52\x20\x4d\xc5\x40\xee\xb3\x2e\x63\xea\x71\x93\x25\x71\xc8\x58\xb9\x1c\x9f\xa6\x16\x31\x63\xd0\x07\xeb\x0e\x0c\x9e\x05\x37\x20\x93\xa4\xd3\x48\x19\xc3\xe8\x7d\x56\x32\x7e\xb1\xdf\x4f\x34\x3a\x0e\xb6\x99\x3e\x2b\x3d\xf0\xfe\x03\x28\x80\xfe\xc7\xd4\xc1\x7d\xfa\xd5\x35\x47\x3d\x76\xfb\x2b\x6e\xb1\xf0\x4a\xe5\xe8\xc2\x04\x75\x9d\xe2\x11\xf8\xde\x5d\x36\xbe\xdb\xf5\xed\x7a\xe6\xf7\x2f\xf8\x35\x28\x88\xa7\x0a\xfc\x5d\x3f\x02\x61\x72\xd9\x08\x93\x34\x4d\xd3\x59\xe1\x99\x15\x1a\xe7\x27\xd8\x8b\x55\x23\xc4\xdd\xbc\x84\xb8\xc5\x99\xbc\xa5\x37\x33\xb6\x33\x63\xd3\x8c\xe6\xae\xda\x4e\x00\xd7\x56\x8e\x40\xb7\xba\xec\xcf\xdc\x7a\xbd\x5a\xcd\xf0\xc6\xc0\xfb\x15\x00\x00\xff\xff\x13\x88\xce\xe5\x98\x0d\x00\x00")

func templatesNetwork_security_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetwork_security_groupTf,
		"templates/network_security_group.tf",
	)
}

func templatesNetwork_security_groupTf() (*asset, error) {
	bytes, err := templatesNetwork_security_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network_security_group.tf", size: 3480, mode: os.FileMode(480), modTime: time.Unix(1529087566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOutputTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\xd1\x6e\xdb\x30\x0c\x45\xdf\xfd\x15\x84\xb0\x87\x66\xc8\xdc\x2d\x80\x87\x21\x40\xb0\x4f\x21\x14\x9b\x4d\xd4\xda\x92\x40\x49\x6e\xbb\x22\xff\x3e\x38\x4e\x0c\xcb\x95\x8a\x36\x7e\x14\x2f\xcf\xbd\xa6\x68\x9b\xe0\x6d\xf0\x20\x7a\x4d\x1e\xb5\xec\x48\xc0\x5b\x01\xd0\xcb\x36\x10\xec\x40\x7c\x7b\xeb\x25\x97\x53\x15\x76\x3b\x10\x02\xfe\xc2\xa3\x51\xfa\x4e\x88\x35\xc8\x7f\x81\x89\x3b\xec\x15\xfb\x20\x5b\xd4\xe4\x9f\x0d\x3f\x95\x7b\xe3\x8e\xe5\xf7\x72\x68\x5a\xc1\x16\x22\xca\x49\x14\xa7\xa2\xb8\x5a\xbb\xb0\xff\xd0\x7c\x56\xcf\xdb\x8f\xa2\x94\xeb\xac\x3d\xf6\x65\x72\x26\x70\x4d\x78\x60\x13\x6c\xde\x3f\xa1\xcb\xe7\x88\xc5\xa9\x3c\x09\x5c\x9c\xeb\x3c\xa6\xcf\x86\xcb\x89\x17\x23\xf6\x86\xe5\x81\x50\xd6\xb5\x09\x3a\x33\xeb\x69\x94\xb1\x78\x7c\x87\xf7\xcc\x86\x1e\x64\x68\x3d\x3a\xaa\x03\x2b\xff\x3a\x9a\x67\xa9\x97\xbd\x58\xc8\x73\x70\x7a\xf1\xc4\x5a\xb6\xa8\xf2\x44\x1b\xf6\xad\xaa\x51\x5d\x20\xca\xa2\x6c\x1a\x26\xe7\x16\x39\x15\x53\xed\x0d\x5f\xab\x0b\xde\xd1\x7b\xeb\xb6\xf7\xf7\x9f\xe1\x6e\x37\x55\x55\x55\x11\xdd\xb2\xea\xa5\x27\x7c\xa2\xd7\x39\x78\x78\xce\x61\x7d\xeb\x70\xa6\x39\x23\xb1\xef\x5c\x39\x3b\x44\x4b\xdd\x49\x14\x00\x8e\xb4\x53\x5e\xf5\x43\x30\xcf\x81\x22\xa3\x31\xd5\xd7\x7d\xa6\x3e\x34\x96\xb4\x73\xc7\x77\x56\x0f\xb2\x75\x91\xd7\x63\xe8\xec\xde\xbc\x60\xe0\xf6\x86\xe9\x6f\x37\x9b\x68\x44\xd7\x9b\xaf\x55\xc3\xc9\x1d\x9e\x0b\x32\x77\x97\x58\xd8\xc1\xf6\xc7\x08\x20\xdd\xa3\x6a\xe2\x56\xa5\x2f\x1b\x94\xb5\x8d\x14\xc9\x5f\x52\xb2\x75\x38\x1c\xeb\x77\xcb\xf0\x6b\xf8\xb3\x86\x9f\xab\x4c\x90\xc3\x73\x92\x75\x34\x6e\x24\x45\x79\xd6\xf0\x6b\xc1\xb9\x5e\x0a\x4e\xba\xc4\xb7\xf1\x11\xb0\x5a\x65\x86\x7b\x33\xf1\xf7\x48\xfc\x1f\x00\x00\xff\xff\xc1\xdc\x5f\xd1\x44\x06\x00\x00")

func templatesOutputTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesOutputTf,
		"templates/output.tf",
	)
}

func templatesOutputTf() (*asset, error) {
	bytes, err := templatesOutputTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/output.tf", size: 1604, mode: os.FileMode(480), modTime: time.Unix(1529087566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResource_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xc1\x6a\xf4\x30\x0c\x84\xef\x7e\x8a\x41\xfc\x87\xbf\xa5\x0d\xed\x75\x21\xf4\x51\x8c\xd7\x31\xa9\x4b\x22\x2d\xb2\x9d\x43\x17\xbf\x7b\x71\xa0\xed\x2e\x9b\xb4\x50\x1d\x6d\x8d\x34\xdf\x48\x43\x92\xa2\x3e\x80\xdc\x7b\xd1\xa0\xb3\xfd\x7c\xb1\xa3\x4a\x39\x11\xe8\x28\xe9\x95\x70\x36\x00\xbb\x39\xa0\x55\x0f\xfa\x77\x5e\x9c\x76\x81\x17\x1b\x87\xfa\xb8\xf6\x18\x60\x12\xef\x72\x14\xfe\xee\xd0\x30\x46\xe1\xda\x3e\xbd\x14\xce\x57\xf2\xeb\x5d\x76\x9d\xdf\xf7\x20\xc2\x0b\x9e\x71\xc0\x13\x2a\x19\x03\x64\x37\xa6\xd5\x01\x10\x78\x89\x2a\x3c\x07\xce\x37\x36\xda\x92\x6a\xaa\x31\xb7\x54\xa7\x72\x9c\xa2\xb7\x71\x07\x68\xab\x7e\x87\xfc\x51\x75\x01\xbe\x85\xb9\x25\xd8\x0f\xe3\x4d\x22\xff\x27\x7a\xc0\xf6\x95\xba\x66\xad\xbb\xef\x9a\xe6\x0e\x07\xec\x8c\x5b\xcd\x7c\x25\x61\xdd\x30\x68\x48\xc9\xba\xe9\xf2\x6c\x29\xbb\x1c\xfd\x5f\x62\xff\x08\x00\x00\xff\xff\xb6\xaa\x3a\xa6\x4c\x02\x00\x00")

func templatesResource_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResource_groupTf,
		"templates/resource_group.tf",
	)
}

func templatesResource_groupTf() (*asset, error) {
	bytes, err := templatesResource_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resource_group.tf", size: 588, mode: os.FileMode(480), modTime: time.Unix(1529087566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStorageTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x92\x3f\x4f\xf3\x30\x10\xc6\xf7\x7c\x8a\x93\xd5\xe1\x7d\x11\xca\xc4\x84\x14\x31\xb2\xd3\x11\x21\xcb\x75\xae\xae\x91\x73\xb6\xce\x4e\xa4\x52\xe5\xbb\x23\xbb\x69\xfa\x47\x94\x32\xb1\x90\x2d\xf6\xdd\xef\x9e\xe7\x39\x33\x46\xdf\xb3\x46\x10\xac\xa8\xf5\x9d\x8c\x89\x2d\x19\x01\x42\x69\xed\x7b\x4a\x02\x76\x15\x80\x43\x32\x69\x03\xd0\xc0\x43\x05\xd0\x87\x80\x0c\xf9\x6f\xad\x5c\xc4\x0a\x20\x06\xd4\x56\xb9\xf9\x64\xac\xaa\x23\x59\x7d\xf4\x8c\x9c\xd1\x9e\x95\x41\x39\x93\xc5\xca\xc7\xcd\x7e\x00\xa9\x0e\xe1\xe2\x6b\x40\x2c\x76\x83\xe2\x3a\xda\x2e\x38\x94\x48\x83\xb4\xed\xb8\xd8\x9d\x49\xad\x27\x5c\xcd\x18\x7b\x97\x46\x51\x01\x1c\x66\x4b\xc3\xbe\x0f\xb2\xc0\x67\xda\x97\x97\x0d\x08\x01\x4f\xf0\xee\x2d\xfd\x13\xe2\x1e\x0e\x9a\xcf\x8b\xeb\x2c\xb8\xbe\xab\x73\xcf\x7f\x78\x84\x2b\xb8\x51\x54\x39\x33\xaf\x55\xb2\x9e\x2e\x6d\x9d\x2a\x31\xd6\x53\x51\x3c\x99\x90\xc9\x96\x64\xcf\x8a\x97\x49\x51\xab\xb8\x3d\xad\x63\x0c\xce\xee\xf9\x32\x6d\x43\xb1\xf7\xfc\xb2\x2c\x83\x93\x32\xb1\x84\x0a\x80\x34\x58\xf6\xd4\x21\xa5\xe3\xd8\x29\xc7\x8c\x1b\x8b\x50\xbb\x46\xbd\xd5\x0e\xa7\x26\x6b\xc8\x33\x4a\xbd\x51\x64\x30\x42\x03\xaf\x22\xbb\x12\x6f\xa5\xe1\xdb\xd5\x6a\x4f\x49\x59\x42\xbe\xb9\xdc\xe2\xac\x94\x5c\xd9\x17\xfc\xf2\xc6\x00\x2e\xde\xe7\x24\xa3\xa8\xb8\xf2\x84\xf7\xf4\x19\x30\xbb\xcf\xf7\x18\xe3\xbc\x99\xc0\x76\x50\x09\xc5\xcf\xc3\x8b\x09\x3b\x8d\xce\xdd\x08\x70\x2e\xfb\x03\x21\xae\x9c\x5f\xe5\x04\x3f\x03\x00\x00\xff\xff\x00\xd2\xa3\x57\xb3\x04\x00\x00")

func templatesStorageTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesStorageTf,
		"templates/storage.tf",
	)
}

func templatesStorageTf() (*asset, error) {
	bytes, err := templatesStorageTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/storage.tf", size: 1203, mode: os.FileMode(480), modTime: time.Unix(1529087566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTlsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x02\x31\x0c\x05\xd0\x7d\x4e\xf1\xc9\x09\x5c\x88\xe0\xa2\x0b\xaf\xa0\x07\x08\xad\x04\x5b\x6c\xa9\x24\xb1\x30\x0c\x73\xf7\x79\xa6\x3e\xff\xf6\x56\x70\x74\x97\x9f\xb5\x95\x43\xe5\xab\x1b\x83\xcb\xf4\x2a\x6b\x38\x63\x27\x20\xf7\xcf\xb4\x16\x75\x20\x81\x9f\xaf\x07\x13\x60\x9e\xa5\xb4\x70\x20\xe1\x7a\xb9\xdf\xe8\xa0\x33\x00\x00\xff\xff\x52\x4d\xac\xad\x51\x00\x00\x00")

func templatesTlsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesTlsTf,
		"templates/tls.tf",
	)
}

func templatesTlsTf() (*asset, error) {
	bytes, err := templatesTlsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tls.tf", size: 81, mode: os.FileMode(480), modTime: time.Unix(1528228376, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xc1\x4a\xc4\x30\x10\x86\xef\x79\x8a\x21\x78\x5e\xdd\x8b\x37\x9f\x25\xa4\xe9\xb8\x0c\xa6\x93\x32\x99\x44\xb0\xf4\xdd\x65\xb7\x10\x35\x5b\xa4\x6c\x7b\xcb\xf7\x7d\x30\xf0\x57\x2f\xe4\x87\x88\x60\x91\xab\xa3\xd1\xc2\xb2\x1a\xf3\xf3\x2a\x78\xa1\xc4\xfd\x6b\xa6\x69\x8e\xe8\xf6\x93\x5c\x86\x1c\x84\x66\xa5\xc4\x3b\x58\x91\x3d\xeb\x0e\x08\x91\xf0\x3f\x90\x31\x08\xea\xfd\x81\x39\x15\x09\xe8\x2e\x92\xca\xec\xd8\x4f\x68\x61\x31\x00\x23\xbe\xfb\x12\x15\xde\xc0\x5a\xf3\x27\xa9\x8c\xea\x1e\xed\x8e\x88\xb9\x0c\x47\x55\x46\xfd\x4c\xf2\xe1\x02\x8d\x72\xe7\x9e\x5f\x4e\xb7\xff\xf9\xfc\xda\x65\xc4\x8a\xc2\x3e\x1e\xeb\x66\x49\x95\x46\x14\xb0\xfe\xab\x08\xca\xb4\x15\xdd\x50\xd7\xf2\x69\xa9\x5e\x4e\x1d\x58\xad\x01\x68\xb3\xc1\xf6\x35\xb9\x81\x9b\xd6\x46\xec\xb5\x06\x7e\x6b\xdb\xa4\x3b\xda\x06\xd6\xeb\xf5\xdf\x01\x00\x00\xff\xff\x3c\x17\x6b\x7b\xa2\x02\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 674, mode: os.FileMode(480), modTime: time.Unix(1529087538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cf_dns.tf": templatesCf_dnsTf,
	"templates/cf_lb.tf": templatesCf_lbTf,
	"templates/concourse_lb.tf": templatesConcourse_lbTf,
	"templates/network.tf": templatesNetworkTf,
	"templates/network_security_group.tf": templatesNetwork_security_groupTf,
	"templates/output.tf": templatesOutputTf,
	"templates/resource_group.tf": templatesResource_groupTf,
	"templates/storage.tf": templatesStorageTf,
	"templates/tls.tf": templatesTlsTf,
	"templates/vars.tf": templatesVarsTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cf_dns.tf": &bintree{templatesCf_dnsTf, map[string]*bintree{}},
		"cf_lb.tf": &bintree{templatesCf_lbTf, map[string]*bintree{}},
		"concourse_lb.tf": &bintree{templatesConcourse_lbTf, map[string]*bintree{}},
		"network.tf": &bintree{templatesNetworkTf, map[string]*bintree{}},
		"network_security_group.tf": &bintree{templatesNetwork_security_groupTf, map[string]*bintree{}},
		"output.tf": &bintree{templatesOutputTf, map[string]*bintree{}},
		"resource_group.tf": &bintree{templatesResource_groupTf, map[string]*bintree{}},
		"storage.tf": &bintree{templatesStorageTf, map[string]*bintree{}},
		"tls.tf": &bintree{templatesTlsTf, map[string]*bintree{}},
		"vars.tf": &bintree{templatesVarsTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

